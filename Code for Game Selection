{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": []
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "xAJwwFCIQQyR"
      },
      "outputs": [],
      "source": [
        "import pandas as pd\n",
        "import numpy as np\n",
        "import matplotlib.pyplot as plt\n",
        "import seaborn as sns"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "pip install factor_analyzer"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "5jWvxgf7h-PY",
        "outputId": "b16f4c46-c0d0-4dd4-cbec-ff51f2725533"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Requirement already satisfied: factor_analyzer in /usr/local/lib/python3.10/dist-packages (0.5.0)\n",
            "Requirement already satisfied: pandas in /usr/local/lib/python3.10/dist-packages (from factor_analyzer) (1.5.3)\n",
            "Requirement already satisfied: scipy in /usr/local/lib/python3.10/dist-packages (from factor_analyzer) (1.11.4)\n",
            "Requirement already satisfied: numpy in /usr/local/lib/python3.10/dist-packages (from factor_analyzer) (1.23.5)\n",
            "Requirement already satisfied: scikit-learn in /usr/local/lib/python3.10/dist-packages (from factor_analyzer) (1.2.2)\n",
            "Requirement already satisfied: pre-commit in /usr/local/lib/python3.10/dist-packages (from factor_analyzer) (3.6.0)\n",
            "Requirement already satisfied: python-dateutil>=2.8.1 in /usr/local/lib/python3.10/dist-packages (from pandas->factor_analyzer) (2.8.2)\n",
            "Requirement already satisfied: pytz>=2020.1 in /usr/local/lib/python3.10/dist-packages (from pandas->factor_analyzer) (2023.3.post1)\n",
            "Requirement already satisfied: cfgv>=2.0.0 in /usr/local/lib/python3.10/dist-packages (from pre-commit->factor_analyzer) (3.4.0)\n",
            "Requirement already satisfied: identify>=1.0.0 in /usr/local/lib/python3.10/dist-packages (from pre-commit->factor_analyzer) (2.5.33)\n",
            "Requirement already satisfied: nodeenv>=0.11.1 in /usr/local/lib/python3.10/dist-packages (from pre-commit->factor_analyzer) (1.8.0)\n",
            "Requirement already satisfied: pyyaml>=5.1 in /usr/local/lib/python3.10/dist-packages (from pre-commit->factor_analyzer) (6.0.1)\n",
            "Requirement already satisfied: virtualenv>=20.10.0 in /usr/local/lib/python3.10/dist-packages (from pre-commit->factor_analyzer) (20.25.0)\n",
            "Requirement already satisfied: joblib>=1.1.1 in /usr/local/lib/python3.10/dist-packages (from scikit-learn->factor_analyzer) (1.3.2)\n",
            "Requirement already satisfied: threadpoolctl>=2.0.0 in /usr/local/lib/python3.10/dist-packages (from scikit-learn->factor_analyzer) (3.2.0)\n",
            "Requirement already satisfied: setuptools in /usr/local/lib/python3.10/dist-packages (from nodeenv>=0.11.1->pre-commit->factor_analyzer) (67.7.2)\n",
            "Requirement already satisfied: six>=1.5 in /usr/local/lib/python3.10/dist-packages (from python-dateutil>=2.8.1->pandas->factor_analyzer) (1.16.0)\n",
            "Requirement already satisfied: distlib<1,>=0.3.7 in /usr/local/lib/python3.10/dist-packages (from virtualenv>=20.10.0->pre-commit->factor_analyzer) (0.3.8)\n",
            "Requirement already satisfied: filelock<4,>=3.12.2 in /usr/local/lib/python3.10/dist-packages (from virtualenv>=20.10.0->pre-commit->factor_analyzer) (3.13.1)\n",
            "Requirement already satisfied: platformdirs<5,>=3.9.1 in /usr/local/lib/python3.10/dist-packages (from virtualenv>=20.10.0->pre-commit->factor_analyzer) (4.1.0)\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Step 1: Evaluate the data\n",
        "# Bartlett's Test of Sphericity (we want p < 0.05 to go ahead)\n",
        "\n",
        "Athena = pd.read_csv('Athena_survey_data.csv')\n",
        "\n",
        "from factor_analyzer.factor_analyzer import calculate_bartlett_sphericity\n",
        "chi_square_value, p_value = calculate_bartlett_sphericity(Athena.iloc[:, 4:44])\n",
        "print(f\"Bartlett's Test of Sphericity p-value: {p_value}\")\n",
        "\n",
        "# KMO-test (we want overall MSA > 0.6 to go ahead)\n",
        "from factor_analyzer.factor_analyzer import calculate_kmo\n",
        "kmo_all, kmo_model = calculate_kmo(Athena.iloc[:, 4:44])\n",
        "print(f\"KMO-test overall MSA: {kmo_model}\")\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "RWGE1Xedh3Pk",
        "outputId": "0e56a88d-59d1-4645-edba-4b58b9d973f5"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Bartlett's Test of Sphericity p-value: 0.0\n",
            "KMO-test overall MSA: 0.8701380128313353\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Step 2: Determine the number of factors\n",
        "from sklearn.decomposition import PCA\n",
        "from sklearn.preprocessing import StandardScaler\n",
        "import matplotlib.pyplot as plt\n",
        "\n",
        "# Standardize the features (important for PCA)\n",
        "scaler = StandardScaler()\n",
        "Athena_scaled = scaler.fit_transform(Athena.iloc[:, 4:44])\n",
        "\n",
        "# Create and fit the PCA model\n",
        "pca = PCA()\n",
        "pca.fit(Athena_scaled)\n",
        "\n",
        "# Get the explained variance ratios\n",
        "explained_variance_ratios = pca.explained_variance_ratio_\n",
        "\n",
        "# Cumulative explained variance\n",
        "cumulative_explained_variance = explained_variance_ratios.cumsum()\n",
        "\n",
        "# Plot the explained variance ratios, want the factors to explain\n",
        "# very roughly 70% or more of the variance\n",
        "plt.plot(range(1, len(explained_variance_ratios) + 1), \\\n",
        "         cumulative_explained_variance, marker='o')\n",
        "plt.title('Cumulative Explained Variance')\n",
        "plt.xlabel('Number of Principal Components')\n",
        "plt.ylabel('Cumulative Explained Variance')\n",
        "plt.show()\n",
        "\n",
        "pca.explained_variance_ # eigenvalues; want values > 1"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 615
        },
        "id": "GvlPNQe4i8Qt",
        "outputId": "ec6a7091-97b5-47b3-ae27-d6d7a429c939"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "array([6.99670203, 4.88863646, 4.35620131, 2.45163899, 2.23872323,\n",
              "       1.99262917, 1.44379198, 1.39758246, 1.31343252, 1.25778586,\n",
              "       1.13573613, 0.99262882, 0.49515349, 0.47821435, 0.44820805,\n",
              "       0.44104524, 0.43468685, 0.41502891, 0.40116737, 0.3909749 ,\n",
              "       0.38170652, 0.37762322, 0.36281221, 0.36170064, 0.35245708,\n",
              "       0.34510457, 0.33208262, 0.32153735, 0.31991887, 0.31195317,\n",
              "       0.30191319, 0.29213323, 0.28811272, 0.27834207, 0.27342393,\n",
              "       0.26187468, 0.24805693, 0.23465604, 0.21797911, 0.21506989])"
            ]
          },
          "metadata": {},
          "execution_count": 5
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Step 3: Extract the factor solution (with varimax rotation)\n",
        "from factor_analyzer import Rotator\n",
        "from sklearn.decomposition import FactorAnalysis\n",
        "\n",
        "rotator = Rotator()\n",
        "\n",
        "fa = FactorAnalysis(n_components=9)\n",
        "fa.fit(Athena_scaled)\n",
        "rotated_loading = rotator.fit_transform(fa.components_.T)\n",
        "\n",
        "print(\"Rotated Factor Loadings:\")\n",
        "pd.DataFrame(rotated_loading, columns=['Factor 1', 'Factor 2','Factor 3', 'Factor 4','Factor 5', 'Factor 6', 'Factor 7', 'Factor 8', 'Factor 9'], index=Athena.columns[4:44])"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 1000
        },
        "id": "C1kp7zt8jKLR",
        "outputId": "4917930b-84cb-40a4-e4ad-f8a103a0c6e3"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Rotated Factor Loadings:\n"
          ]
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "                    Factor 1  Factor 2  Factor 3  Factor 4  Factor 5  \\\n",
              "imp.challenge      -0.066332  0.038319  0.538692 -0.157580 -0.204948   \n",
              "imp.unlocks         0.027133  0.263999 -0.078596 -0.069299  0.002710   \n",
              "imp.customize       0.199324 -0.052764  0.033062  0.107964 -0.108350   \n",
              "imp.difficulty     -0.028312  0.080744  0.507783 -0.151117 -0.189240   \n",
              "imp.characters      0.268414  0.065294 -0.013410  0.801729 -0.088991   \n",
              "imp.storyline       0.285178  0.071052 -0.017411  0.779782 -0.093542   \n",
              "imp.mastery        -0.024820 -0.035136  0.718604 -0.011387 -0.104856   \n",
              "imp.backstory       0.269625  0.068964 -0.046022  0.794528 -0.102245   \n",
              "imp.dominate       -0.027256 -0.408362  0.028789 -0.104886 -0.052066   \n",
              "imp.completion      0.011266  0.296948 -0.056428 -0.051647  0.036318   \n",
              "imp.wealth          0.177543  0.307798  0.045788  0.030469 -0.133405   \n",
              "imp.fantasy         0.764251  0.052590  0.042054  0.128464 -0.121879   \n",
              "imp.items           0.681691  0.098088  0.027945  0.323777 -0.115073   \n",
              "imp.power           0.746448  0.048811 -0.024432  0.136852 -0.112104   \n",
              "imp.offbeat         0.179708 -0.030985  0.168864  0.100513 -0.738542   \n",
              "imp.collect         0.027329  0.288767 -0.063699 -0.028452  0.031389   \n",
              "enj.excitement      0.007093 -0.122290  0.012716 -0.035259 -0.033392   \n",
              "enj.destruction    -0.133849 -0.036299 -0.160731  0.009260  0.112010   \n",
              "enj.others          0.003682 -0.816030 -0.011868  0.006707 -0.037167   \n",
              "enj.react           0.001498 -0.063050  0.012292 -0.026748  0.020343   \n",
              "enj.duels          -0.087186 -0.496774 -0.027800 -0.127165 -0.002015   \n",
              "enj.strategy        0.022383 -0.051035  0.766993  0.071890 -0.047006   \n",
              "enj.roleplay        0.746450  0.021622 -0.038448  0.166840 -0.149652   \n",
              "enj.competition    -0.072174 -0.543177 -0.019517 -0.126702  0.000592   \n",
              "enj.decisions       0.050648 -0.031995  0.748009  0.090103 -0.029359   \n",
              "enj.common.goal     0.011305 -0.783751  0.007027  0.030889 -0.090083   \n",
              "enj.planning        0.028916 -0.016674  0.757438  0.068735 -0.039888   \n",
              "enj.immersion       0.782363  0.057771 -0.021478  0.143531 -0.139219   \n",
              "enj.helping        -0.014165 -0.747698  0.063898  0.033738 -0.058536   \n",
              "enj.fast           -0.004333 -0.084486 -0.064250  0.026966 -0.021515   \n",
              "enj.guns           -0.090170 -0.068515 -0.181505 -0.009375  0.096863   \n",
              "enj.gore           -0.094086 -0.046422 -0.174624 -0.020864  0.108450   \n",
              "enj.blow.up        -0.128114 -0.057660 -0.174251 -0.014468  0.074702   \n",
              "freq.explore        0.155780 -0.043758  0.172914  0.071928 -0.751422   \n",
              "freq.experiment     0.119996 -0.073315  0.165180  0.054011 -0.768444   \n",
              "freq.study          0.006859  0.043953  0.723224 -0.038178 -0.101559   \n",
              "freq.char.creation  0.204095 -0.040847  0.032966  0.083403 -0.085472   \n",
              "freq.stats          0.180396  0.289542  0.123270  0.028899 -0.091215   \n",
              "freq.customize      0.218493 -0.020733  0.003461  0.078621 -0.071693   \n",
              "freq.test.world     0.152767 -0.016533  0.147652  0.061713 -0.784861   \n",
              "\n",
              "                    Factor 6  Factor 7  Factor 8  Factor 9  \n",
              "imp.challenge       0.027947 -0.128875  0.007751  0.038788  \n",
              "imp.unlocks        -0.006140 -0.117617  0.786197  0.095054  \n",
              "imp.customize      -0.773589 -0.136900 -0.007096 -0.028467  \n",
              "imp.difficulty     -0.026327 -0.143390  0.013992  0.051835  \n",
              "imp.characters     -0.058275 -0.001018 -0.036906  0.033350  \n",
              "imp.storyline      -0.135358 -0.018656 -0.074365 -0.005154  \n",
              "imp.mastery        -0.004234 -0.092150 -0.076078  0.044966  \n",
              "imp.backstory      -0.109156 -0.006853 -0.028739  0.048314  \n",
              "imp.dominate       -0.104365 -0.007632 -0.136575 -0.279285  \n",
              "imp.completion      0.021404 -0.124607  0.745907  0.110114  \n",
              "imp.wealth         -0.221768 -0.059848  0.078956 -0.147615  \n",
              "imp.fantasy        -0.143198 -0.111627 -0.009868  0.009689  \n",
              "imp.items          -0.125289 -0.073523 -0.004771  0.010173  \n",
              "imp.power          -0.173496 -0.108923  0.025999  0.046413  \n",
              "imp.offbeat        -0.036139 -0.083420 -0.038160  0.014122  \n",
              "imp.collect        -0.004240 -0.119336  0.778151  0.129003  \n",
              "enj.excitement     -0.046435  0.136755 -0.057516 -0.716272  \n",
              "enj.destruction     0.083693  0.776143 -0.090682 -0.090378  \n",
              "enj.others         -0.055713  0.016609 -0.128686 -0.030512  \n",
              "enj.react          -0.003747  0.088717 -0.110611 -0.758095  \n",
              "enj.duels          -0.053616  0.057444 -0.199314 -0.230484  \n",
              "enj.strategy       -0.020783 -0.047285 -0.045719 -0.069857  \n",
              "enj.roleplay       -0.153266 -0.074119  0.048462 -0.024067  \n",
              "enj.competition    -0.031272  0.052376 -0.172128 -0.234140  \n",
              "enj.decisions      -0.008592 -0.091085 -0.023473  0.010561  \n",
              "enj.common.goal    -0.022310  0.029399 -0.096040 -0.003894  \n",
              "enj.planning       -0.068187 -0.085579 -0.056124 -0.055500  \n",
              "enj.immersion      -0.135544 -0.095208  0.017437 -0.023832  \n",
              "enj.helping         0.021541  0.011208 -0.088996  0.006107  \n",
              "enj.fast           -0.041408  0.105605 -0.070520 -0.702323  \n",
              "enj.guns            0.082967  0.764773 -0.095279 -0.089491  \n",
              "enj.gore            0.104272  0.773522 -0.136426 -0.122309  \n",
              "enj.blow.up         0.132203  0.755725 -0.036909 -0.104292  \n",
              "freq.explore       -0.112938 -0.075760 -0.052585 -0.017223  \n",
              "freq.experiment    -0.059992 -0.112493 -0.019353 -0.008215  \n",
              "freq.study         -0.003723 -0.093598  0.010858  0.019282  \n",
              "freq.char.creation -0.731591 -0.092061 -0.012485 -0.022147  \n",
              "freq.stats         -0.172340 -0.105426  0.079292 -0.172216  \n",
              "freq.customize     -0.737738 -0.122042 -0.015519 -0.065319  \n",
              "freq.test.world    -0.109965 -0.100770  0.040446 -0.060196  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-27925253-43f0-4eb3-8e53-0bf3bdf11935\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Factor 1</th>\n",
              "      <th>Factor 2</th>\n",
              "      <th>Factor 3</th>\n",
              "      <th>Factor 4</th>\n",
              "      <th>Factor 5</th>\n",
              "      <th>Factor 6</th>\n",
              "      <th>Factor 7</th>\n",
              "      <th>Factor 8</th>\n",
              "      <th>Factor 9</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>imp.challenge</th>\n",
              "      <td>-0.066332</td>\n",
              "      <td>0.038319</td>\n",
              "      <td>0.538692</td>\n",
              "      <td>-0.157580</td>\n",
              "      <td>-0.204948</td>\n",
              "      <td>0.027947</td>\n",
              "      <td>-0.128875</td>\n",
              "      <td>0.007751</td>\n",
              "      <td>0.038788</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>imp.unlocks</th>\n",
              "      <td>0.027133</td>\n",
              "      <td>0.263999</td>\n",
              "      <td>-0.078596</td>\n",
              "      <td>-0.069299</td>\n",
              "      <td>0.002710</td>\n",
              "      <td>-0.006140</td>\n",
              "      <td>-0.117617</td>\n",
              "      <td>0.786197</td>\n",
              "      <td>0.095054</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>imp.customize</th>\n",
              "      <td>0.199324</td>\n",
              "      <td>-0.052764</td>\n",
              "      <td>0.033062</td>\n",
              "      <td>0.107964</td>\n",
              "      <td>-0.108350</td>\n",
              "      <td>-0.773589</td>\n",
              "      <td>-0.136900</td>\n",
              "      <td>-0.007096</td>\n",
              "      <td>-0.028467</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>imp.difficulty</th>\n",
              "      <td>-0.028312</td>\n",
              "      <td>0.080744</td>\n",
              "      <td>0.507783</td>\n",
              "      <td>-0.151117</td>\n",
              "      <td>-0.189240</td>\n",
              "      <td>-0.026327</td>\n",
              "      <td>-0.143390</td>\n",
              "      <td>0.013992</td>\n",
              "      <td>0.051835</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>imp.characters</th>\n",
              "      <td>0.268414</td>\n",
              "      <td>0.065294</td>\n",
              "      <td>-0.013410</td>\n",
              "      <td>0.801729</td>\n",
              "      <td>-0.088991</td>\n",
              "      <td>-0.058275</td>\n",
              "      <td>-0.001018</td>\n",
              "      <td>-0.036906</td>\n",
              "      <td>0.033350</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>imp.storyline</th>\n",
              "      <td>0.285178</td>\n",
              "      <td>0.071052</td>\n",
              "      <td>-0.017411</td>\n",
              "      <td>0.779782</td>\n",
              "      <td>-0.093542</td>\n",
              "      <td>-0.135358</td>\n",
              "      <td>-0.018656</td>\n",
              "      <td>-0.074365</td>\n",
              "      <td>-0.005154</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>imp.mastery</th>\n",
              "      <td>-0.024820</td>\n",
              "      <td>-0.035136</td>\n",
              "      <td>0.718604</td>\n",
              "      <td>-0.011387</td>\n",
              "      <td>-0.104856</td>\n",
              "      <td>-0.004234</td>\n",
              "      <td>-0.092150</td>\n",
              "      <td>-0.076078</td>\n",
              "      <td>0.044966</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>imp.backstory</th>\n",
              "      <td>0.269625</td>\n",
              "      <td>0.068964</td>\n",
              "      <td>-0.046022</td>\n",
              "      <td>0.794528</td>\n",
              "      <td>-0.102245</td>\n",
              "      <td>-0.109156</td>\n",
              "      <td>-0.006853</td>\n",
              "      <td>-0.028739</td>\n",
              "      <td>0.048314</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>imp.dominate</th>\n",
              "      <td>-0.027256</td>\n",
              "      <td>-0.408362</td>\n",
              "      <td>0.028789</td>\n",
              "      <td>-0.104886</td>\n",
              "      <td>-0.052066</td>\n",
              "      <td>-0.104365</td>\n",
              "      <td>-0.007632</td>\n",
              "      <td>-0.136575</td>\n",
              "      <td>-0.279285</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>imp.completion</th>\n",
              "      <td>0.011266</td>\n",
              "      <td>0.296948</td>\n",
              "      <td>-0.056428</td>\n",
              "      <td>-0.051647</td>\n",
              "      <td>0.036318</td>\n",
              "      <td>0.021404</td>\n",
              "      <td>-0.124607</td>\n",
              "      <td>0.745907</td>\n",
              "      <td>0.110114</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>imp.wealth</th>\n",
              "      <td>0.177543</td>\n",
              "      <td>0.307798</td>\n",
              "      <td>0.045788</td>\n",
              "      <td>0.030469</td>\n",
              "      <td>-0.133405</td>\n",
              "      <td>-0.221768</td>\n",
              "      <td>-0.059848</td>\n",
              "      <td>0.078956</td>\n",
              "      <td>-0.147615</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>imp.fantasy</th>\n",
              "      <td>0.764251</td>\n",
              "      <td>0.052590</td>\n",
              "      <td>0.042054</td>\n",
              "      <td>0.128464</td>\n",
              "      <td>-0.121879</td>\n",
              "      <td>-0.143198</td>\n",
              "      <td>-0.111627</td>\n",
              "      <td>-0.009868</td>\n",
              "      <td>0.009689</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>imp.items</th>\n",
              "      <td>0.681691</td>\n",
              "      <td>0.098088</td>\n",
              "      <td>0.027945</td>\n",
              "      <td>0.323777</td>\n",
              "      <td>-0.115073</td>\n",
              "      <td>-0.125289</td>\n",
              "      <td>-0.073523</td>\n",
              "      <td>-0.004771</td>\n",
              "      <td>0.010173</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>imp.power</th>\n",
              "      <td>0.746448</td>\n",
              "      <td>0.048811</td>\n",
              "      <td>-0.024432</td>\n",
              "      <td>0.136852</td>\n",
              "      <td>-0.112104</td>\n",
              "      <td>-0.173496</td>\n",
              "      <td>-0.108923</td>\n",
              "      <td>0.025999</td>\n",
              "      <td>0.046413</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>imp.offbeat</th>\n",
              "      <td>0.179708</td>\n",
              "      <td>-0.030985</td>\n",
              "      <td>0.168864</td>\n",
              "      <td>0.100513</td>\n",
              "      <td>-0.738542</td>\n",
              "      <td>-0.036139</td>\n",
              "      <td>-0.083420</td>\n",
              "      <td>-0.038160</td>\n",
              "      <td>0.014122</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>imp.collect</th>\n",
              "      <td>0.027329</td>\n",
              "      <td>0.288767</td>\n",
              "      <td>-0.063699</td>\n",
              "      <td>-0.028452</td>\n",
              "      <td>0.031389</td>\n",
              "      <td>-0.004240</td>\n",
              "      <td>-0.119336</td>\n",
              "      <td>0.778151</td>\n",
              "      <td>0.129003</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>enj.excitement</th>\n",
              "      <td>0.007093</td>\n",
              "      <td>-0.122290</td>\n",
              "      <td>0.012716</td>\n",
              "      <td>-0.035259</td>\n",
              "      <td>-0.033392</td>\n",
              "      <td>-0.046435</td>\n",
              "      <td>0.136755</td>\n",
              "      <td>-0.057516</td>\n",
              "      <td>-0.716272</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>enj.destruction</th>\n",
              "      <td>-0.133849</td>\n",
              "      <td>-0.036299</td>\n",
              "      <td>-0.160731</td>\n",
              "      <td>0.009260</td>\n",
              "      <td>0.112010</td>\n",
              "      <td>0.083693</td>\n",
              "      <td>0.776143</td>\n",
              "      <td>-0.090682</td>\n",
              "      <td>-0.090378</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>enj.others</th>\n",
              "      <td>0.003682</td>\n",
              "      <td>-0.816030</td>\n",
              "      <td>-0.011868</td>\n",
              "      <td>0.006707</td>\n",
              "      <td>-0.037167</td>\n",
              "      <td>-0.055713</td>\n",
              "      <td>0.016609</td>\n",
              "      <td>-0.128686</td>\n",
              "      <td>-0.030512</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>enj.react</th>\n",
              "      <td>0.001498</td>\n",
              "      <td>-0.063050</td>\n",
              "      <td>0.012292</td>\n",
              "      <td>-0.026748</td>\n",
              "      <td>0.020343</td>\n",
              "      <td>-0.003747</td>\n",
              "      <td>0.088717</td>\n",
              "      <td>-0.110611</td>\n",
              "      <td>-0.758095</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>enj.duels</th>\n",
              "      <td>-0.087186</td>\n",
              "      <td>-0.496774</td>\n",
              "      <td>-0.027800</td>\n",
              "      <td>-0.127165</td>\n",
              "      <td>-0.002015</td>\n",
              "      <td>-0.053616</td>\n",
              "      <td>0.057444</td>\n",
              "      <td>-0.199314</td>\n",
              "      <td>-0.230484</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>enj.strategy</th>\n",
              "      <td>0.022383</td>\n",
              "      <td>-0.051035</td>\n",
              "      <td>0.766993</td>\n",
              "      <td>0.071890</td>\n",
              "      <td>-0.047006</td>\n",
              "      <td>-0.020783</td>\n",
              "      <td>-0.047285</td>\n",
              "      <td>-0.045719</td>\n",
              "      <td>-0.069857</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>enj.roleplay</th>\n",
              "      <td>0.746450</td>\n",
              "      <td>0.021622</td>\n",
              "      <td>-0.038448</td>\n",
              "      <td>0.166840</td>\n",
              "      <td>-0.149652</td>\n",
              "      <td>-0.153266</td>\n",
              "      <td>-0.074119</td>\n",
              "      <td>0.048462</td>\n",
              "      <td>-0.024067</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>enj.competition</th>\n",
              "      <td>-0.072174</td>\n",
              "      <td>-0.543177</td>\n",
              "      <td>-0.019517</td>\n",
              "      <td>-0.126702</td>\n",
              "      <td>0.000592</td>\n",
              "      <td>-0.031272</td>\n",
              "      <td>0.052376</td>\n",
              "      <td>-0.172128</td>\n",
              "      <td>-0.234140</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>enj.decisions</th>\n",
              "      <td>0.050648</td>\n",
              "      <td>-0.031995</td>\n",
              "      <td>0.748009</td>\n",
              "      <td>0.090103</td>\n",
              "      <td>-0.029359</td>\n",
              "      <td>-0.008592</td>\n",
              "      <td>-0.091085</td>\n",
              "      <td>-0.023473</td>\n",
              "      <td>0.010561</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>enj.common.goal</th>\n",
              "      <td>0.011305</td>\n",
              "      <td>-0.783751</td>\n",
              "      <td>0.007027</td>\n",
              "      <td>0.030889</td>\n",
              "      <td>-0.090083</td>\n",
              "      <td>-0.022310</td>\n",
              "      <td>0.029399</td>\n",
              "      <td>-0.096040</td>\n",
              "      <td>-0.003894</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>enj.planning</th>\n",
              "      <td>0.028916</td>\n",
              "      <td>-0.016674</td>\n",
              "      <td>0.757438</td>\n",
              "      <td>0.068735</td>\n",
              "      <td>-0.039888</td>\n",
              "      <td>-0.068187</td>\n",
              "      <td>-0.085579</td>\n",
              "      <td>-0.056124</td>\n",
              "      <td>-0.055500</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>enj.immersion</th>\n",
              "      <td>0.782363</td>\n",
              "      <td>0.057771</td>\n",
              "      <td>-0.021478</td>\n",
              "      <td>0.143531</td>\n",
              "      <td>-0.139219</td>\n",
              "      <td>-0.135544</td>\n",
              "      <td>-0.095208</td>\n",
              "      <td>0.017437</td>\n",
              "      <td>-0.023832</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>enj.helping</th>\n",
              "      <td>-0.014165</td>\n",
              "      <td>-0.747698</td>\n",
              "      <td>0.063898</td>\n",
              "      <td>0.033738</td>\n",
              "      <td>-0.058536</td>\n",
              "      <td>0.021541</td>\n",
              "      <td>0.011208</td>\n",
              "      <td>-0.088996</td>\n",
              "      <td>0.006107</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>enj.fast</th>\n",
              "      <td>-0.004333</td>\n",
              "      <td>-0.084486</td>\n",
              "      <td>-0.064250</td>\n",
              "      <td>0.026966</td>\n",
              "      <td>-0.021515</td>\n",
              "      <td>-0.041408</td>\n",
              "      <td>0.105605</td>\n",
              "      <td>-0.070520</td>\n",
              "      <td>-0.702323</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>enj.guns</th>\n",
              "      <td>-0.090170</td>\n",
              "      <td>-0.068515</td>\n",
              "      <td>-0.181505</td>\n",
              "      <td>-0.009375</td>\n",
              "      <td>0.096863</td>\n",
              "      <td>0.082967</td>\n",
              "      <td>0.764773</td>\n",
              "      <td>-0.095279</td>\n",
              "      <td>-0.089491</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>enj.gore</th>\n",
              "      <td>-0.094086</td>\n",
              "      <td>-0.046422</td>\n",
              "      <td>-0.174624</td>\n",
              "      <td>-0.020864</td>\n",
              "      <td>0.108450</td>\n",
              "      <td>0.104272</td>\n",
              "      <td>0.773522</td>\n",
              "      <td>-0.136426</td>\n",
              "      <td>-0.122309</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>enj.blow.up</th>\n",
              "      <td>-0.128114</td>\n",
              "      <td>-0.057660</td>\n",
              "      <td>-0.174251</td>\n",
              "      <td>-0.014468</td>\n",
              "      <td>0.074702</td>\n",
              "      <td>0.132203</td>\n",
              "      <td>0.755725</td>\n",
              "      <td>-0.036909</td>\n",
              "      <td>-0.104292</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>freq.explore</th>\n",
              "      <td>0.155780</td>\n",
              "      <td>-0.043758</td>\n",
              "      <td>0.172914</td>\n",
              "      <td>0.071928</td>\n",
              "      <td>-0.751422</td>\n",
              "      <td>-0.112938</td>\n",
              "      <td>-0.075760</td>\n",
              "      <td>-0.052585</td>\n",
              "      <td>-0.017223</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>freq.experiment</th>\n",
              "      <td>0.119996</td>\n",
              "      <td>-0.073315</td>\n",
              "      <td>0.165180</td>\n",
              "      <td>0.054011</td>\n",
              "      <td>-0.768444</td>\n",
              "      <td>-0.059992</td>\n",
              "      <td>-0.112493</td>\n",
              "      <td>-0.019353</td>\n",
              "      <td>-0.008215</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>freq.study</th>\n",
              "      <td>0.006859</td>\n",
              "      <td>0.043953</td>\n",
              "      <td>0.723224</td>\n",
              "      <td>-0.038178</td>\n",
              "      <td>-0.101559</td>\n",
              "      <td>-0.003723</td>\n",
              "      <td>-0.093598</td>\n",
              "      <td>0.010858</td>\n",
              "      <td>0.019282</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>freq.char.creation</th>\n",
              "      <td>0.204095</td>\n",
              "      <td>-0.040847</td>\n",
              "      <td>0.032966</td>\n",
              "      <td>0.083403</td>\n",
              "      <td>-0.085472</td>\n",
              "      <td>-0.731591</td>\n",
              "      <td>-0.092061</td>\n",
              "      <td>-0.012485</td>\n",
              "      <td>-0.022147</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>freq.stats</th>\n",
              "      <td>0.180396</td>\n",
              "      <td>0.289542</td>\n",
              "      <td>0.123270</td>\n",
              "      <td>0.028899</td>\n",
              "      <td>-0.091215</td>\n",
              "      <td>-0.172340</td>\n",
              "      <td>-0.105426</td>\n",
              "      <td>0.079292</td>\n",
              "      <td>-0.172216</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>freq.customize</th>\n",
              "      <td>0.218493</td>\n",
              "      <td>-0.020733</td>\n",
              "      <td>0.003461</td>\n",
              "      <td>0.078621</td>\n",
              "      <td>-0.071693</td>\n",
              "      <td>-0.737738</td>\n",
              "      <td>-0.122042</td>\n",
              "      <td>-0.015519</td>\n",
              "      <td>-0.065319</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>freq.test.world</th>\n",
              "      <td>0.152767</td>\n",
              "      <td>-0.016533</td>\n",
              "      <td>0.147652</td>\n",
              "      <td>0.061713</td>\n",
              "      <td>-0.784861</td>\n",
              "      <td>-0.109965</td>\n",
              "      <td>-0.100770</td>\n",
              "      <td>0.040446</td>\n",
              "      <td>-0.060196</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-27925253-43f0-4eb3-8e53-0bf3bdf11935')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-27925253-43f0-4eb3-8e53-0bf3bdf11935 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-27925253-43f0-4eb3-8e53-0bf3bdf11935');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-7359f503-c519-4c12-a4cb-7c229b4083cd\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-7359f503-c519-4c12-a4cb-7c229b4083cd')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-7359f503-c519-4c12-a4cb-7c229b4083cd button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ]
          },
          "metadata": {},
          "execution_count": 6
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Step 4: Create and name the factor scores\n",
        "factor_scores = fa.transform(Athena_scaled)\n",
        "Athena['Roleplayer'] = factor_scores[:, 0]\n",
        "Athena['Lone Wolf'] = factor_scores[:, 1]\n",
        "Athena['Strategist'] = factor_scores[:, 2]\n",
        "Athena['Storyteller'] = factor_scores[:, 3]\n",
        "Athena['Explorer'] = factor_scores[:, 4]\n",
        "Athena['Effortless'] = factor_scores[:, 5]\n",
        "Athena['Daredevil'] = factor_scores[:, 6]\n",
        "Athena['Achievement Hunter'] = factor_scores[:, 7]\n",
        "Athena['Calm Commander'] = factor_scores[:, 8]\n",
        "Athena"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 461
        },
        "id": "SazL2-QnkHaE",
        "outputId": "d049a38f-7533-4872-ee9f-89db8a1b084a"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "     gender state  age  income  imp.challenge  imp.unlocks  imp.customize  \\\n",
              "0    female    AZ   24   54000              5            6              7   \n",
              "1      male    FL   18   12000              4            2              5   \n",
              "2      male    IL   23   41000              7            5              2   \n",
              "3      male    CA   21   61000              4            3              4   \n",
              "4      male    FL   25   59000              6            4              3   \n",
              "..      ...   ...  ...     ...            ...          ...            ...   \n",
              "822  female    LA   22   22000              4            3              6   \n",
              "823  female    CA   24   34000              6            7              7   \n",
              "824  female    LA   20   25000              4            4              3   \n",
              "825    male    IL   25   56000              5            6              3   \n",
              "826    male    OH   28   78000              3            3              3   \n",
              "\n",
              "     imp.difficulty  imp.characters  imp.storyline  ...  rank.QuestoftheTitan  \\\n",
              "0                 4               6              5  ...                     2   \n",
              "1                 3               4              6  ...                     2   \n",
              "2                 5               3              4  ...                     6   \n",
              "3                 6               1              2  ...                     6   \n",
              "4                 6               3              2  ...                     6   \n",
              "..              ...             ...            ...  ...                   ...   \n",
              "822               4               4              6  ...                     5   \n",
              "823               6               6              6  ...                     2   \n",
              "824               3               6              7  ...                     5   \n",
              "825               4               4              5  ...                     2   \n",
              "826               5               7              5  ...                     3   \n",
              "\n",
              "     Roleplayer  Lone Wolf  Strategist  Storyteller  Explorer  Effortless  \\\n",
              "0      1.240023  -0.285445    0.205085    -1.143538 -1.074458    0.463469   \n",
              "1      0.916792  -1.436489    0.267324    -0.226573  0.037161    0.380209   \n",
              "2     -0.654835   0.410358    1.004055    -0.285772 -0.076289    0.321241   \n",
              "3     -0.696910   0.429744    1.231411    -2.047777  0.477917   -1.066510   \n",
              "4     -0.275797  -0.011119    2.090315    -0.125512 -0.209845    1.140093   \n",
              "..          ...        ...         ...          ...       ...         ...   \n",
              "822    0.333327  -1.326152   -0.287164    -1.333346  0.252281   -0.828883   \n",
              "823    1.271794   1.012125    0.162894    -0.411102  0.255422    0.476538   \n",
              "824    1.358417  -1.129601   -0.357119    -0.614262 -0.392481    1.829287   \n",
              "825    0.060315   1.275060    0.661744    -0.497654 -0.823849    0.713884   \n",
              "826    0.638354  -0.038773   -0.345522    -0.575890  1.730758    0.094045   \n",
              "\n",
              "     Daredevil  Achievement Hunter  Calm Commander  \n",
              "0    -1.037442            0.732058        0.607057  \n",
              "1    -0.186650           -0.667546        2.071920  \n",
              "2     1.031774            0.282634       -0.299090  \n",
              "3     0.018140           -1.089635       -0.670698  \n",
              "4     0.533272            0.203288        1.000952  \n",
              "..         ...                 ...             ...  \n",
              "822  -0.215843            0.621285       -0.211268  \n",
              "823  -1.042455            0.791177        0.566828  \n",
              "824   0.812673            1.292990        0.132186  \n",
              "825  -1.139296           -0.855290        0.043587  \n",
              "826   0.862939            0.051342        0.031597  \n",
              "\n",
              "[827 rows x 61 columns]"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-7bc99f88-2d9b-453a-94f8-b9ad9c4cf45e\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>gender</th>\n",
              "      <th>state</th>\n",
              "      <th>age</th>\n",
              "      <th>income</th>\n",
              "      <th>imp.challenge</th>\n",
              "      <th>imp.unlocks</th>\n",
              "      <th>imp.customize</th>\n",
              "      <th>imp.difficulty</th>\n",
              "      <th>imp.characters</th>\n",
              "      <th>imp.storyline</th>\n",
              "      <th>...</th>\n",
              "      <th>rank.QuestoftheTitan</th>\n",
              "      <th>Roleplayer</th>\n",
              "      <th>Lone Wolf</th>\n",
              "      <th>Strategist</th>\n",
              "      <th>Storyteller</th>\n",
              "      <th>Explorer</th>\n",
              "      <th>Effortless</th>\n",
              "      <th>Daredevil</th>\n",
              "      <th>Achievement Hunter</th>\n",
              "      <th>Calm Commander</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>female</td>\n",
              "      <td>AZ</td>\n",
              "      <td>24</td>\n",
              "      <td>54000</td>\n",
              "      <td>5</td>\n",
              "      <td>6</td>\n",
              "      <td>7</td>\n",
              "      <td>4</td>\n",
              "      <td>6</td>\n",
              "      <td>5</td>\n",
              "      <td>...</td>\n",
              "      <td>2</td>\n",
              "      <td>1.240023</td>\n",
              "      <td>-0.285445</td>\n",
              "      <td>0.205085</td>\n",
              "      <td>-1.143538</td>\n",
              "      <td>-1.074458</td>\n",
              "      <td>0.463469</td>\n",
              "      <td>-1.037442</td>\n",
              "      <td>0.732058</td>\n",
              "      <td>0.607057</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>male</td>\n",
              "      <td>FL</td>\n",
              "      <td>18</td>\n",
              "      <td>12000</td>\n",
              "      <td>4</td>\n",
              "      <td>2</td>\n",
              "      <td>5</td>\n",
              "      <td>3</td>\n",
              "      <td>4</td>\n",
              "      <td>6</td>\n",
              "      <td>...</td>\n",
              "      <td>2</td>\n",
              "      <td>0.916792</td>\n",
              "      <td>-1.436489</td>\n",
              "      <td>0.267324</td>\n",
              "      <td>-0.226573</td>\n",
              "      <td>0.037161</td>\n",
              "      <td>0.380209</td>\n",
              "      <td>-0.186650</td>\n",
              "      <td>-0.667546</td>\n",
              "      <td>2.071920</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>male</td>\n",
              "      <td>IL</td>\n",
              "      <td>23</td>\n",
              "      <td>41000</td>\n",
              "      <td>7</td>\n",
              "      <td>5</td>\n",
              "      <td>2</td>\n",
              "      <td>5</td>\n",
              "      <td>3</td>\n",
              "      <td>4</td>\n",
              "      <td>...</td>\n",
              "      <td>6</td>\n",
              "      <td>-0.654835</td>\n",
              "      <td>0.410358</td>\n",
              "      <td>1.004055</td>\n",
              "      <td>-0.285772</td>\n",
              "      <td>-0.076289</td>\n",
              "      <td>0.321241</td>\n",
              "      <td>1.031774</td>\n",
              "      <td>0.282634</td>\n",
              "      <td>-0.299090</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>male</td>\n",
              "      <td>CA</td>\n",
              "      <td>21</td>\n",
              "      <td>61000</td>\n",
              "      <td>4</td>\n",
              "      <td>3</td>\n",
              "      <td>4</td>\n",
              "      <td>6</td>\n",
              "      <td>1</td>\n",
              "      <td>2</td>\n",
              "      <td>...</td>\n",
              "      <td>6</td>\n",
              "      <td>-0.696910</td>\n",
              "      <td>0.429744</td>\n",
              "      <td>1.231411</td>\n",
              "      <td>-2.047777</td>\n",
              "      <td>0.477917</td>\n",
              "      <td>-1.066510</td>\n",
              "      <td>0.018140</td>\n",
              "      <td>-1.089635</td>\n",
              "      <td>-0.670698</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>male</td>\n",
              "      <td>FL</td>\n",
              "      <td>25</td>\n",
              "      <td>59000</td>\n",
              "      <td>6</td>\n",
              "      <td>4</td>\n",
              "      <td>3</td>\n",
              "      <td>6</td>\n",
              "      <td>3</td>\n",
              "      <td>2</td>\n",
              "      <td>...</td>\n",
              "      <td>6</td>\n",
              "      <td>-0.275797</td>\n",
              "      <td>-0.011119</td>\n",
              "      <td>2.090315</td>\n",
              "      <td>-0.125512</td>\n",
              "      <td>-0.209845</td>\n",
              "      <td>1.140093</td>\n",
              "      <td>0.533272</td>\n",
              "      <td>0.203288</td>\n",
              "      <td>1.000952</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>822</th>\n",
              "      <td>female</td>\n",
              "      <td>LA</td>\n",
              "      <td>22</td>\n",
              "      <td>22000</td>\n",
              "      <td>4</td>\n",
              "      <td>3</td>\n",
              "      <td>6</td>\n",
              "      <td>4</td>\n",
              "      <td>4</td>\n",
              "      <td>6</td>\n",
              "      <td>...</td>\n",
              "      <td>5</td>\n",
              "      <td>0.333327</td>\n",
              "      <td>-1.326152</td>\n",
              "      <td>-0.287164</td>\n",
              "      <td>-1.333346</td>\n",
              "      <td>0.252281</td>\n",
              "      <td>-0.828883</td>\n",
              "      <td>-0.215843</td>\n",
              "      <td>0.621285</td>\n",
              "      <td>-0.211268</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>823</th>\n",
              "      <td>female</td>\n",
              "      <td>CA</td>\n",
              "      <td>24</td>\n",
              "      <td>34000</td>\n",
              "      <td>6</td>\n",
              "      <td>7</td>\n",
              "      <td>7</td>\n",
              "      <td>6</td>\n",
              "      <td>6</td>\n",
              "      <td>6</td>\n",
              "      <td>...</td>\n",
              "      <td>2</td>\n",
              "      <td>1.271794</td>\n",
              "      <td>1.012125</td>\n",
              "      <td>0.162894</td>\n",
              "      <td>-0.411102</td>\n",
              "      <td>0.255422</td>\n",
              "      <td>0.476538</td>\n",
              "      <td>-1.042455</td>\n",
              "      <td>0.791177</td>\n",
              "      <td>0.566828</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>824</th>\n",
              "      <td>female</td>\n",
              "      <td>LA</td>\n",
              "      <td>20</td>\n",
              "      <td>25000</td>\n",
              "      <td>4</td>\n",
              "      <td>4</td>\n",
              "      <td>3</td>\n",
              "      <td>3</td>\n",
              "      <td>6</td>\n",
              "      <td>7</td>\n",
              "      <td>...</td>\n",
              "      <td>5</td>\n",
              "      <td>1.358417</td>\n",
              "      <td>-1.129601</td>\n",
              "      <td>-0.357119</td>\n",
              "      <td>-0.614262</td>\n",
              "      <td>-0.392481</td>\n",
              "      <td>1.829287</td>\n",
              "      <td>0.812673</td>\n",
              "      <td>1.292990</td>\n",
              "      <td>0.132186</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>825</th>\n",
              "      <td>male</td>\n",
              "      <td>IL</td>\n",
              "      <td>25</td>\n",
              "      <td>56000</td>\n",
              "      <td>5</td>\n",
              "      <td>6</td>\n",
              "      <td>3</td>\n",
              "      <td>4</td>\n",
              "      <td>4</td>\n",
              "      <td>5</td>\n",
              "      <td>...</td>\n",
              "      <td>2</td>\n",
              "      <td>0.060315</td>\n",
              "      <td>1.275060</td>\n",
              "      <td>0.661744</td>\n",
              "      <td>-0.497654</td>\n",
              "      <td>-0.823849</td>\n",
              "      <td>0.713884</td>\n",
              "      <td>-1.139296</td>\n",
              "      <td>-0.855290</td>\n",
              "      <td>0.043587</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>826</th>\n",
              "      <td>male</td>\n",
              "      <td>OH</td>\n",
              "      <td>28</td>\n",
              "      <td>78000</td>\n",
              "      <td>3</td>\n",
              "      <td>3</td>\n",
              "      <td>3</td>\n",
              "      <td>5</td>\n",
              "      <td>7</td>\n",
              "      <td>5</td>\n",
              "      <td>...</td>\n",
              "      <td>3</td>\n",
              "      <td>0.638354</td>\n",
              "      <td>-0.038773</td>\n",
              "      <td>-0.345522</td>\n",
              "      <td>-0.575890</td>\n",
              "      <td>1.730758</td>\n",
              "      <td>0.094045</td>\n",
              "      <td>0.862939</td>\n",
              "      <td>0.051342</td>\n",
              "      <td>0.031597</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>827 rows × 61 columns</p>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-7bc99f88-2d9b-453a-94f8-b9ad9c4cf45e')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-7bc99f88-2d9b-453a-94f8-b9ad9c4cf45e button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-7bc99f88-2d9b-453a-94f8-b9ad9c4cf45e');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-be49d5c4-856c-4115-8864-c9b992966e7f\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-be49d5c4-856c-4115-8864-c9b992966e7f')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-be49d5c4-856c-4115-8864-c9b992966e7f button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "  <div id=\"id_dcdd4d42-3dd6-4fbb-9e03-7cd398f283ff\">\n",
              "    <style>\n",
              "      .colab-df-generate {\n",
              "        background-color: #E8F0FE;\n",
              "        border: none;\n",
              "        border-radius: 50%;\n",
              "        cursor: pointer;\n",
              "        display: none;\n",
              "        fill: #1967D2;\n",
              "        height: 32px;\n",
              "        padding: 0 0 0 0;\n",
              "        width: 32px;\n",
              "      }\n",
              "\n",
              "      .colab-df-generate:hover {\n",
              "        background-color: #E2EBFA;\n",
              "        box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "        fill: #174EA6;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate {\n",
              "        background-color: #3B4455;\n",
              "        fill: #D2E3FC;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate:hover {\n",
              "        background-color: #434B5C;\n",
              "        box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "        filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "        fill: #FFFFFF;\n",
              "      }\n",
              "    </style>\n",
              "    <button class=\"colab-df-generate\" onclick=\"generateWithVariable('Athena')\"\n",
              "            title=\"Generate code using this dataframe.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M7,19H8.4L18.45,9,17,7.55,7,17.6ZM5,21V16.75L18.45,3.32a2,2,0,0,1,2.83,0l1.4,1.43a1.91,1.91,0,0,1,.58,1.4,1.91,1.91,0,0,1-.58,1.4L9.25,21ZM18.45,9,17,7.55Zm-12,3A5.31,5.31,0,0,0,4.9,8.1,5.31,5.31,0,0,0,1,6.5,5.31,5.31,0,0,0,4.9,4.9,5.31,5.31,0,0,0,6.5,1,5.31,5.31,0,0,0,8.1,4.9,5.31,5.31,0,0,0,12,6.5,5.46,5.46,0,0,0,6.5,12Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "    <script>\n",
              "      (() => {\n",
              "      const buttonEl =\n",
              "        document.querySelector('#id_dcdd4d42-3dd6-4fbb-9e03-7cd398f283ff button.colab-df-generate');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      buttonEl.onclick = () => {\n",
              "        google.colab.notebook.generateWithVariable('Athena');\n",
              "      }\n",
              "      })();\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ]
          },
          "metadata": {},
          "execution_count": 7
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Step 1: determine the number of clusters\n",
        "# Option A: Dendrogram\n",
        "from scipy.spatial.distance import pdist, squareform\n",
        "from scipy.cluster.hierarchy import linkage, dendrogram\n",
        "dissimilarity_matrix = squareform(pdist(Athena.iloc[:, -9:], metric='euclidean'))\n",
        "\n",
        "# perform hierarchical clustering using Ward's method on this matrix\n",
        "hc = linkage(dissimilarity_matrix, method=\"ward\")\n",
        "\n",
        "# plot the resulting dendrogram\n",
        "dendrogram(hc, leaf_font_size=6)\n",
        "plt.show()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 488
        },
        "id": "Gc_DTkdE0z4B",
        "outputId": "6ff33bb7-aa4d-4184-9a6a-60c7c5ce3b40"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "<ipython-input-8-e424937c498f>:8: ClusterWarning: scipy.cluster: The symmetric non-negative hollow observation matrix looks suspiciously like an uncondensed distance matrix\n",
            "  hc = linkage(dissimilarity_matrix, method=\"ward\")\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Option B: The Elbow\n",
        "from sklearn.cluster import KMeans\n",
        "\n",
        "# Calculate the sum of squared distances for different values of k\n",
        "sum_of_squared_distances = []\n",
        "K_range = range(1, 10)  # You can adjust this range based on your problem\n",
        "for k in K_range:\n",
        "    kmeans = KMeans(n_clusters=k, n_init='auto')\n",
        "    kmeans.fit(Athena_scaled)\n",
        "    sum_of_squared_distances.append(kmeans.inertia_)\n",
        "\n",
        "# Plot the Elbow curve\n",
        "plt.plot(K_range, sum_of_squared_distances, marker='o')\n",
        "plt.title('Elbow Method For Optimal k')\n",
        "plt.xlabel('Number of Clusters (k)')\n",
        "plt.ylabel('Sum of Squared Distances')\n",
        "plt.show()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 472
        },
        "id": "frTIlYP311ln",
        "outputId": "e00d53f8-a8a4-4caf-b61b-897fc9bbbe24"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Step 2: Calculate the final cluster solution\n",
        "kmeans = KMeans(n_clusters=3, random_state=13, n_init='auto')\n",
        "\n",
        "# Add a new column with cluster assignment for each person\n",
        "Athena['Cluster'] = kmeans.fit_predict(Athena.iloc[:, -9:])\n",
        "Athena"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 461
        },
        "id": "bsvGrHhC1_eb",
        "outputId": "858b7cc8-973d-4232-e158-e984da13255d"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "     gender state  age  income  imp.challenge  imp.unlocks  imp.customize  \\\n",
              "0    female    AZ   24   54000              5            6              7   \n",
              "1      male    FL   18   12000              4            2              5   \n",
              "2      male    IL   23   41000              7            5              2   \n",
              "3      male    CA   21   61000              4            3              4   \n",
              "4      male    FL   25   59000              6            4              3   \n",
              "..      ...   ...  ...     ...            ...          ...            ...   \n",
              "822  female    LA   22   22000              4            3              6   \n",
              "823  female    CA   24   34000              6            7              7   \n",
              "824  female    LA   20   25000              4            4              3   \n",
              "825    male    IL   25   56000              5            6              3   \n",
              "826    male    OH   28   78000              3            3              3   \n",
              "\n",
              "     imp.difficulty  imp.characters  imp.storyline  ...  Roleplayer  \\\n",
              "0                 4               6              5  ...    1.240023   \n",
              "1                 3               4              6  ...    0.916792   \n",
              "2                 5               3              4  ...   -0.654835   \n",
              "3                 6               1              2  ...   -0.696910   \n",
              "4                 6               3              2  ...   -0.275797   \n",
              "..              ...             ...            ...  ...         ...   \n",
              "822               4               4              6  ...    0.333327   \n",
              "823               6               6              6  ...    1.271794   \n",
              "824               3               6              7  ...    1.358417   \n",
              "825               4               4              5  ...    0.060315   \n",
              "826               5               7              5  ...    0.638354   \n",
              "\n",
              "     Lone Wolf  Strategist  Storyteller  Explorer  Effortless  Daredevil  \\\n",
              "0    -0.285445    0.205085    -1.143538 -1.074458    0.463469  -1.037442   \n",
              "1    -1.436489    0.267324    -0.226573  0.037161    0.380209  -0.186650   \n",
              "2     0.410358    1.004055    -0.285772 -0.076289    0.321241   1.031774   \n",
              "3     0.429744    1.231411    -2.047777  0.477917   -1.066510   0.018140   \n",
              "4    -0.011119    2.090315    -0.125512 -0.209845    1.140093   0.533272   \n",
              "..         ...         ...          ...       ...         ...        ...   \n",
              "822  -1.326152   -0.287164    -1.333346  0.252281   -0.828883  -0.215843   \n",
              "823   1.012125    0.162894    -0.411102  0.255422    0.476538  -1.042455   \n",
              "824  -1.129601   -0.357119    -0.614262 -0.392481    1.829287   0.812673   \n",
              "825   1.275060    0.661744    -0.497654 -0.823849    0.713884  -1.139296   \n",
              "826  -0.038773   -0.345522    -0.575890  1.730758    0.094045   0.862939   \n",
              "\n",
              "     Achievement Hunter  Calm Commander  Cluster  \n",
              "0              0.732058        0.607057        0  \n",
              "1             -0.667546        2.071920        0  \n",
              "2              0.282634       -0.299090        1  \n",
              "3             -1.089635       -0.670698        0  \n",
              "4              0.203288        1.000952        0  \n",
              "..                  ...             ...      ...  \n",
              "822            0.621285       -0.211268        0  \n",
              "823            0.791177        0.566828        1  \n",
              "824            1.292990        0.132186        2  \n",
              "825           -0.855290        0.043587        1  \n",
              "826            0.051342        0.031597        1  \n",
              "\n",
              "[827 rows x 62 columns]"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-20debc62-9897-46fd-bcd9-5dac24fefbfd\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>gender</th>\n",
              "      <th>state</th>\n",
              "      <th>age</th>\n",
              "      <th>income</th>\n",
              "      <th>imp.challenge</th>\n",
              "      <th>imp.unlocks</th>\n",
              "      <th>imp.customize</th>\n",
              "      <th>imp.difficulty</th>\n",
              "      <th>imp.characters</th>\n",
              "      <th>imp.storyline</th>\n",
              "      <th>...</th>\n",
              "      <th>Roleplayer</th>\n",
              "      <th>Lone Wolf</th>\n",
              "      <th>Strategist</th>\n",
              "      <th>Storyteller</th>\n",
              "      <th>Explorer</th>\n",
              "      <th>Effortless</th>\n",
              "      <th>Daredevil</th>\n",
              "      <th>Achievement Hunter</th>\n",
              "      <th>Calm Commander</th>\n",
              "      <th>Cluster</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>female</td>\n",
              "      <td>AZ</td>\n",
              "      <td>24</td>\n",
              "      <td>54000</td>\n",
              "      <td>5</td>\n",
              "      <td>6</td>\n",
              "      <td>7</td>\n",
              "      <td>4</td>\n",
              "      <td>6</td>\n",
              "      <td>5</td>\n",
              "      <td>...</td>\n",
              "      <td>1.240023</td>\n",
              "      <td>-0.285445</td>\n",
              "      <td>0.205085</td>\n",
              "      <td>-1.143538</td>\n",
              "      <td>-1.074458</td>\n",
              "      <td>0.463469</td>\n",
              "      <td>-1.037442</td>\n",
              "      <td>0.732058</td>\n",
              "      <td>0.607057</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>male</td>\n",
              "      <td>FL</td>\n",
              "      <td>18</td>\n",
              "      <td>12000</td>\n",
              "      <td>4</td>\n",
              "      <td>2</td>\n",
              "      <td>5</td>\n",
              "      <td>3</td>\n",
              "      <td>4</td>\n",
              "      <td>6</td>\n",
              "      <td>...</td>\n",
              "      <td>0.916792</td>\n",
              "      <td>-1.436489</td>\n",
              "      <td>0.267324</td>\n",
              "      <td>-0.226573</td>\n",
              "      <td>0.037161</td>\n",
              "      <td>0.380209</td>\n",
              "      <td>-0.186650</td>\n",
              "      <td>-0.667546</td>\n",
              "      <td>2.071920</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>male</td>\n",
              "      <td>IL</td>\n",
              "      <td>23</td>\n",
              "      <td>41000</td>\n",
              "      <td>7</td>\n",
              "      <td>5</td>\n",
              "      <td>2</td>\n",
              "      <td>5</td>\n",
              "      <td>3</td>\n",
              "      <td>4</td>\n",
              "      <td>...</td>\n",
              "      <td>-0.654835</td>\n",
              "      <td>0.410358</td>\n",
              "      <td>1.004055</td>\n",
              "      <td>-0.285772</td>\n",
              "      <td>-0.076289</td>\n",
              "      <td>0.321241</td>\n",
              "      <td>1.031774</td>\n",
              "      <td>0.282634</td>\n",
              "      <td>-0.299090</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>male</td>\n",
              "      <td>CA</td>\n",
              "      <td>21</td>\n",
              "      <td>61000</td>\n",
              "      <td>4</td>\n",
              "      <td>3</td>\n",
              "      <td>4</td>\n",
              "      <td>6</td>\n",
              "      <td>1</td>\n",
              "      <td>2</td>\n",
              "      <td>...</td>\n",
              "      <td>-0.696910</td>\n",
              "      <td>0.429744</td>\n",
              "      <td>1.231411</td>\n",
              "      <td>-2.047777</td>\n",
              "      <td>0.477917</td>\n",
              "      <td>-1.066510</td>\n",
              "      <td>0.018140</td>\n",
              "      <td>-1.089635</td>\n",
              "      <td>-0.670698</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>male</td>\n",
              "      <td>FL</td>\n",
              "      <td>25</td>\n",
              "      <td>59000</td>\n",
              "      <td>6</td>\n",
              "      <td>4</td>\n",
              "      <td>3</td>\n",
              "      <td>6</td>\n",
              "      <td>3</td>\n",
              "      <td>2</td>\n",
              "      <td>...</td>\n",
              "      <td>-0.275797</td>\n",
              "      <td>-0.011119</td>\n",
              "      <td>2.090315</td>\n",
              "      <td>-0.125512</td>\n",
              "      <td>-0.209845</td>\n",
              "      <td>1.140093</td>\n",
              "      <td>0.533272</td>\n",
              "      <td>0.203288</td>\n",
              "      <td>1.000952</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>822</th>\n",
              "      <td>female</td>\n",
              "      <td>LA</td>\n",
              "      <td>22</td>\n",
              "      <td>22000</td>\n",
              "      <td>4</td>\n",
              "      <td>3</td>\n",
              "      <td>6</td>\n",
              "      <td>4</td>\n",
              "      <td>4</td>\n",
              "      <td>6</td>\n",
              "      <td>...</td>\n",
              "      <td>0.333327</td>\n",
              "      <td>-1.326152</td>\n",
              "      <td>-0.287164</td>\n",
              "      <td>-1.333346</td>\n",
              "      <td>0.252281</td>\n",
              "      <td>-0.828883</td>\n",
              "      <td>-0.215843</td>\n",
              "      <td>0.621285</td>\n",
              "      <td>-0.211268</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>823</th>\n",
              "      <td>female</td>\n",
              "      <td>CA</td>\n",
              "      <td>24</td>\n",
              "      <td>34000</td>\n",
              "      <td>6</td>\n",
              "      <td>7</td>\n",
              "      <td>7</td>\n",
              "      <td>6</td>\n",
              "      <td>6</td>\n",
              "      <td>6</td>\n",
              "      <td>...</td>\n",
              "      <td>1.271794</td>\n",
              "      <td>1.012125</td>\n",
              "      <td>0.162894</td>\n",
              "      <td>-0.411102</td>\n",
              "      <td>0.255422</td>\n",
              "      <td>0.476538</td>\n",
              "      <td>-1.042455</td>\n",
              "      <td>0.791177</td>\n",
              "      <td>0.566828</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>824</th>\n",
              "      <td>female</td>\n",
              "      <td>LA</td>\n",
              "      <td>20</td>\n",
              "      <td>25000</td>\n",
              "      <td>4</td>\n",
              "      <td>4</td>\n",
              "      <td>3</td>\n",
              "      <td>3</td>\n",
              "      <td>6</td>\n",
              "      <td>7</td>\n",
              "      <td>...</td>\n",
              "      <td>1.358417</td>\n",
              "      <td>-1.129601</td>\n",
              "      <td>-0.357119</td>\n",
              "      <td>-0.614262</td>\n",
              "      <td>-0.392481</td>\n",
              "      <td>1.829287</td>\n",
              "      <td>0.812673</td>\n",
              "      <td>1.292990</td>\n",
              "      <td>0.132186</td>\n",
              "      <td>2</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>825</th>\n",
              "      <td>male</td>\n",
              "      <td>IL</td>\n",
              "      <td>25</td>\n",
              "      <td>56000</td>\n",
              "      <td>5</td>\n",
              "      <td>6</td>\n",
              "      <td>3</td>\n",
              "      <td>4</td>\n",
              "      <td>4</td>\n",
              "      <td>5</td>\n",
              "      <td>...</td>\n",
              "      <td>0.060315</td>\n",
              "      <td>1.275060</td>\n",
              "      <td>0.661744</td>\n",
              "      <td>-0.497654</td>\n",
              "      <td>-0.823849</td>\n",
              "      <td>0.713884</td>\n",
              "      <td>-1.139296</td>\n",
              "      <td>-0.855290</td>\n",
              "      <td>0.043587</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>826</th>\n",
              "      <td>male</td>\n",
              "      <td>OH</td>\n",
              "      <td>28</td>\n",
              "      <td>78000</td>\n",
              "      <td>3</td>\n",
              "      <td>3</td>\n",
              "      <td>3</td>\n",
              "      <td>5</td>\n",
              "      <td>7</td>\n",
              "      <td>5</td>\n",
              "      <td>...</td>\n",
              "      <td>0.638354</td>\n",
              "      <td>-0.038773</td>\n",
              "      <td>-0.345522</td>\n",
              "      <td>-0.575890</td>\n",
              "      <td>1.730758</td>\n",
              "      <td>0.094045</td>\n",
              "      <td>0.862939</td>\n",
              "      <td>0.051342</td>\n",
              "      <td>0.031597</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>827 rows × 62 columns</p>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-20debc62-9897-46fd-bcd9-5dac24fefbfd')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-20debc62-9897-46fd-bcd9-5dac24fefbfd button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-20debc62-9897-46fd-bcd9-5dac24fefbfd');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-e3a0a164-00d8-4bca-af33-2e1e259122d7\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-e3a0a164-00d8-4bca-af33-2e1e259122d7')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-e3a0a164-00d8-4bca-af33-2e1e259122d7 button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "  <div id=\"id_8d3d3810-87d4-4d98-b066-e0d87a6de13d\">\n",
              "    <style>\n",
              "      .colab-df-generate {\n",
              "        background-color: #E8F0FE;\n",
              "        border: none;\n",
              "        border-radius: 50%;\n",
              "        cursor: pointer;\n",
              "        display: none;\n",
              "        fill: #1967D2;\n",
              "        height: 32px;\n",
              "        padding: 0 0 0 0;\n",
              "        width: 32px;\n",
              "      }\n",
              "\n",
              "      .colab-df-generate:hover {\n",
              "        background-color: #E2EBFA;\n",
              "        box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "        fill: #174EA6;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate {\n",
              "        background-color: #3B4455;\n",
              "        fill: #D2E3FC;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate:hover {\n",
              "        background-color: #434B5C;\n",
              "        box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "        filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "        fill: #FFFFFF;\n",
              "      }\n",
              "    </style>\n",
              "    <button class=\"colab-df-generate\" onclick=\"generateWithVariable('Athena')\"\n",
              "            title=\"Generate code using this dataframe.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M7,19H8.4L18.45,9,17,7.55,7,17.6ZM5,21V16.75L18.45,3.32a2,2,0,0,1,2.83,0l1.4,1.43a1.91,1.91,0,0,1,.58,1.4,1.91,1.91,0,0,1-.58,1.4L9.25,21ZM18.45,9,17,7.55Zm-12,3A5.31,5.31,0,0,0,4.9,8.1,5.31,5.31,0,0,0,1,6.5,5.31,5.31,0,0,0,4.9,4.9,5.31,5.31,0,0,0,6.5,1,5.31,5.31,0,0,0,8.1,4.9,5.31,5.31,0,0,0,12,6.5,5.46,5.46,0,0,0,6.5,12Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "    <script>\n",
              "      (() => {\n",
              "      const buttonEl =\n",
              "        document.querySelector('#id_8d3d3810-87d4-4d98-b066-e0d87a6de13d button.colab-df-generate');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      buttonEl.onclick = () => {\n",
              "        google.colab.notebook.generateWithVariable('Athena');\n",
              "      }\n",
              "      })();\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ]
          },
          "metadata": {},
          "execution_count": 10
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Step 3: Interpret the K-means output\n",
        "print(\"Cluster Centers:\")\n",
        "pd.DataFrame(kmeans.cluster_centers_, columns=Athena.columns[-10:-1], \\\n",
        "             index=['Cluster 0', 'Cluster 1', 'Cluster 2'], )"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 161
        },
        "id": "Zu5RXgx82L4Y",
        "outputId": "6c3a1c5f-160e-4b28-c03c-7e5b0aea34bd"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Cluster Centers:\n"
          ]
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "           Roleplayer  Lone Wolf  Strategist  Storyteller  Explorer  \\\n",
              "Cluster 0    0.433075  -0.476614    0.658846     0.023890 -0.143747   \n",
              "Cluster 1    0.155301   1.110122   -0.008569    -0.093305  0.065695   \n",
              "Cluster 2   -0.585134  -0.559299   -0.660209     0.063409  0.084094   \n",
              "\n",
              "           Effortless  Daredevil  Achievement Hunter  Calm Commander  \n",
              "Cluster 0   -0.388953   0.015550           -0.130809       -0.039570  \n",
              "Cluster 1    0.101510  -0.013774            0.119559        0.087523  \n",
              "Cluster 2    0.299163  -0.002834            0.020378       -0.042074  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-3918660f-387b-4252-8a69-d5f0c113ced4\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Roleplayer</th>\n",
              "      <th>Lone Wolf</th>\n",
              "      <th>Strategist</th>\n",
              "      <th>Storyteller</th>\n",
              "      <th>Explorer</th>\n",
              "      <th>Effortless</th>\n",
              "      <th>Daredevil</th>\n",
              "      <th>Achievement Hunter</th>\n",
              "      <th>Calm Commander</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>Cluster 0</th>\n",
              "      <td>0.433075</td>\n",
              "      <td>-0.476614</td>\n",
              "      <td>0.658846</td>\n",
              "      <td>0.023890</td>\n",
              "      <td>-0.143747</td>\n",
              "      <td>-0.388953</td>\n",
              "      <td>0.015550</td>\n",
              "      <td>-0.130809</td>\n",
              "      <td>-0.039570</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Cluster 1</th>\n",
              "      <td>0.155301</td>\n",
              "      <td>1.110122</td>\n",
              "      <td>-0.008569</td>\n",
              "      <td>-0.093305</td>\n",
              "      <td>0.065695</td>\n",
              "      <td>0.101510</td>\n",
              "      <td>-0.013774</td>\n",
              "      <td>0.119559</td>\n",
              "      <td>0.087523</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Cluster 2</th>\n",
              "      <td>-0.585134</td>\n",
              "      <td>-0.559299</td>\n",
              "      <td>-0.660209</td>\n",
              "      <td>0.063409</td>\n",
              "      <td>0.084094</td>\n",
              "      <td>0.299163</td>\n",
              "      <td>-0.002834</td>\n",
              "      <td>0.020378</td>\n",
              "      <td>-0.042074</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-3918660f-387b-4252-8a69-d5f0c113ced4')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-3918660f-387b-4252-8a69-d5f0c113ced4 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-3918660f-387b-4252-8a69-d5f0c113ced4');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-d469b0c8-aed3-4cf7-aaee-ad4b1c7a11c7\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-d469b0c8-aed3-4cf7-aaee-ad4b1c7a11c7')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-d469b0c8-aed3-4cf7-aaee-ad4b1c7a11c7 button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ]
          },
          "metadata": {},
          "execution_count": 11
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Visualize K-means clusters\n",
        "import seaborn as sns\n",
        "\n",
        "sns.scatterplot(data=Athena, x='Strategist', y='Lone Wolf', hue='Cluster', palette='viridis')\n",
        "plt.show()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 454
        },
        "id": "IRuDdt-c2X_Y",
        "outputId": "c7380824-f27b-439f-b4c8-7790bb92e636"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "iVBORw0KGgoAAAANSUhEUgAAAjUAAAG1CAYAAAABTQXdAAAAOXRFWHRTb2Z0d2FyZQBNYXRwbG90bGliIHZlcnNpb24zLjcuMSwgaHR0cHM6Ly9tYXRwbG90bGliLm9yZy/bCgiHAAAACXBIWXMAAA9hAAAPYQGoP6dpAAEAAElEQVR4nOyddXhUZ9qH73GfibuQ4BbcobhbC6UtdXfbrlV2t+22XXa/brttt+7derHilALF3TUhWEKI2yQjGf/+SDJkmJkQIELg3NfV62rOe+acdyZk3t953uf5PSKPx+NBQEBAQEBAQKCVI27pCQgICAgICAgINAaCqBEQEBAQEBC4KhBEjYCAgICAgMBVgSBqBAQEBAQEBK4KBFEjICAgICAgcFUgiBoBAQEBAQGBqwJB1AgICAgICAhcFQiiRkBAQEBAQOCqQBA1AgICAgICAlcFgqgREBAQEBAQuCpoNaLmgw8+IC0tDb1ej16vZ9CgQaxYsaKlpyUgICAgICBwhSBqLb2flixZgkQioX379ng8Hr766itef/119u7dS9euXVt6egICAgICAgItTKsRNYEICwvj9ddf57777mvQ+W63m9zcXHQ6HSKRqIlnJyAgICAgINAYeDweKisriYuLQywOvskkbcY5NRoul4u5c+diNpsZNGhQ0PNsNhs2m83789mzZ+nSpUtzTFFAQEBAQECgkTlz5gwJCQlBx1uVqDl48CCDBg2iqqoKrVbLwoUL6xUpc+bM4eWXX/Y7fubMGfR6fVNOVUBAQEBAQKCRqKioIDExEZ1OV+95rWr7yW63k52djdFoZN68eXz66aesX78+qLA5P1JT+6EYjUZB1AgICAgICLQSKioqMBgMF1y/W5WoOZ8xY8bQtm1bPvroowad39APRUBAQEBAQODKoaHrd6sp6Q6E2+32icQICAgICAgIXLu0mpya5557jokTJ5KUlERlZSXfffcd69at45dffmnpqQkICAgICAhcAbQaUVNYWMidd95JXl4eBoOBtLQ0fvnlF8aOHdvSUxMQEBAQEGgyXC4XDoejpafRpMhkMiQSyWVfp9WIms8++6ylpyAgICAgINBseDwe8vPzKS8vb+mpNAshISHExMRclo9cqxE1AgICAgIC1xK1giYqKgq1Wn3VmsZ6PB4sFguFhYUAxMbGXvK1BFEjICAgICBwheFy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7ytnGtRMjclkokmTJr4Owy9ERETIN24tkPtYO+Q+1g65j2dO7mHtOJ37WNUMzTGyUFgIIYQQAUGSGiGEEEIEBElqhBu73c6kSZOw2+2+DsWvyX2sHXIfa4fcxzMn97B2nO372KAWCgshhBAicMlMjRBCCCECgiQ1QgghhAgIktQIIYQQIiBIUiM82rt3L6NGjaJFixYEBwfTqlUrJk2ahMPh8HVofmfy5Mn07t2bkJAQoqKifB2O33j33Xdp3rw5QUFB9OzZk59//tnXIfmdH374gauuuork5GSUUnz66ae+DsnvTJkyhe7duxMeHk5CQgLXXnst27dv93VYfue9996jQ4cOFfVpevXqxVdffVXr7yNJjfBo27ZtuFwupk+fzubNm3n99deZNm0ajz/+uK9D8zsOh4Nhw4YxZswYX4fiNz766CPGjx/PpEmTWLt2LR07duTyyy/nyJEjvg7NrxQWFtKxY0feffddX4fit77//nvGjh3LqlWr+OabbygrK+Oyyy6jsLDQ16H5lSZNmvDiiy/y66+/8ssvv3DJJZdwzTXXsHnz5lp9H9n9JKrtlVde4b333mP37t2+DsUvzZ49m3HjxpGTk+PrUOq9nj170r17d9555x3AaHGSkpLCAw88wMSJE30cnX9SSrFw4UKuvfZaX4fi19LT00lISOD777+nb9++vg7Hr8XExPDKK68watSoWrumzNSIasvNzSUmJsbXYYgA53A4+PXXXxk4cGDFMZPJxMCBA1m5cqUPIxPC+DkIyM/CM+B0Opk/fz6FhYX06tWrVq/doHo/idOXmprK22+/zdSpU30dighwGRkZOJ1OEhMT3Y4nJiaybds2H0UlhDFjOG7cOPr06cMFF1zg63D8zsaNG+nVqxclJSWEhYWxcOFC2rVrV6vvITM1DczEiRNRSlX55+QPjrS0NAYNGsSwYcMYPXq0jyKvX07nPgoh/NvYsWPZtGkT8+fP93UofqlNmzasX7+e1atXM2bMGEaMGMGWLVtq9T1kpqaBmTBhAnfccUeV57Rs2bLivw8cOMDFF19M7969ef/9989ydP6jpvdRVF9cXBxms5nDhw+7HT98+DBJSUk+iko0dPfffz+ff/45P/zwA02aNPF1OH7JZrPRunVrALp27cqaNWt48803mT59eq29hyQ1DUx8fDzx8fHVOjctLY2LL76Y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\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Step 5: Add labels to the clusters\n",
        "Athena['Segment_Label'] = Athena['Cluster'].replace({0: 'Coalition Crafters', 1: 'Solitary Navigators', 2: 'Party Cows'})\n",
        "Athena"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 530
        },
        "id": "8-Rrnh3hV75n",
        "outputId": "a6766e47-20f3-46c1-c303-9e173ee5cdd4"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "     gender state  age  income  imp.challenge  imp.unlocks  imp.customize  \\\n",
              "0    female    AZ   24   54000              5            6              7   \n",
              "1      male    FL   18   12000              4            2              5   \n",
              "2      male    IL   23   41000              7            5              2   \n",
              "3      male    CA   21   61000              4            3              4   \n",
              "4      male    FL   25   59000              6            4              3   \n",
              "..      ...   ...  ...     ...            ...          ...            ...   \n",
              "822  female    LA   22   22000              4            3              6   \n",
              "823  female    CA   24   34000              6            7              7   \n",
              "824  female    LA   20   25000              4            4              3   \n",
              "825    male    IL   25   56000              5            6              3   \n",
              "826    male    OH   28   78000              3            3              3   \n",
              "\n",
              "     imp.difficulty  imp.characters  imp.storyline  ...  Lone Wolf  \\\n",
              "0                 4               6              5  ...  -0.285445   \n",
              "1                 3               4              6  ...  -1.436489   \n",
              "2                 5               3              4  ...   0.410358   \n",
              "3                 6               1              2  ...   0.429744   \n",
              "4                 6               3              2  ...  -0.011119   \n",
              "..              ...             ...            ...  ...        ...   \n",
              "822               4               4              6  ...  -1.326152   \n",
              "823               6               6              6  ...   1.012125   \n",
              "824               3               6              7  ...  -1.129601   \n",
              "825               4               4              5  ...   1.275060   \n",
              "826               5               7              5  ...  -0.038773   \n",
              "\n",
              "     Strategist  Storyteller  Explorer  Effortless  Daredevil  \\\n",
              "0      0.205085    -1.143538 -1.074458    0.463469  -1.037442   \n",
              "1      0.267324    -0.226573  0.037161    0.380209  -0.186650   \n",
              "2      1.004055    -0.285772 -0.076289    0.321241   1.031774   \n",
              "3      1.231411    -2.047777  0.477917   -1.066510   0.018140   \n",
              "4      2.090315    -0.125512 -0.209845    1.140093   0.533272   \n",
              "..          ...          ...       ...         ...        ...   \n",
              "822   -0.287164    -1.333346  0.252281   -0.828883  -0.215843   \n",
              "823    0.162894    -0.411102  0.255422    0.476538  -1.042455   \n",
              "824   -0.357119    -0.614262 -0.392481    1.829287   0.812673   \n",
              "825    0.661744    -0.497654 -0.823849    0.713884  -1.139296   \n",
              "826   -0.345522    -0.575890  1.730758    0.094045   0.862939   \n",
              "\n",
              "     Achievement Hunter  Calm Commander  Cluster        Segment_Label  \n",
              "0              0.732058        0.607057        0   Coalition Crafters  \n",
              "1             -0.667546        2.071920        0   Coalition Crafters  \n",
              "2              0.282634       -0.299090        1  Solitary Navigators  \n",
              "3             -1.089635       -0.670698        0   Coalition Crafters  \n",
              "4              0.203288        1.000952        0   Coalition Crafters  \n",
              "..                  ...             ...      ...                  ...  \n",
              "822            0.621285       -0.211268        0   Coalition Crafters  \n",
              "823            0.791177        0.566828        1  Solitary Navigators  \n",
              "824            1.292990        0.132186        2           Party Cows  \n",
              "825           -0.855290        0.043587        1  Solitary Navigators  \n",
              "826            0.051342        0.031597        1  Solitary Navigators  \n",
              "\n",
              "[827 rows x 63 columns]"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-187c24ef-c6a0-41d1-a8d0-4b8573b7c85e\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>gender</th>\n",
              "      <th>state</th>\n",
              "      <th>age</th>\n",
              "      <th>income</th>\n",
              "      <th>imp.challenge</th>\n",
              "      <th>imp.unlocks</th>\n",
              "      <th>imp.customize</th>\n",
              "      <th>imp.difficulty</th>\n",
              "      <th>imp.characters</th>\n",
              "      <th>imp.storyline</th>\n",
              "      <th>...</th>\n",
              "      <th>Lone Wolf</th>\n",
              "      <th>Strategist</th>\n",
              "      <th>Storyteller</th>\n",
              "      <th>Explorer</th>\n",
              "      <th>Effortless</th>\n",
              "      <th>Daredevil</th>\n",
              "      <th>Achievement Hunter</th>\n",
              "      <th>Calm Commander</th>\n",
              "      <th>Cluster</th>\n",
              "      <th>Segment_Label</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>female</td>\n",
              "      <td>AZ</td>\n",
              "      <td>24</td>\n",
              "      <td>54000</td>\n",
              "      <td>5</td>\n",
              "      <td>6</td>\n",
              "      <td>7</td>\n",
              "      <td>4</td>\n",
              "      <td>6</td>\n",
              "      <td>5</td>\n",
              "      <td>...</td>\n",
              "      <td>-0.285445</td>\n",
              "      <td>0.205085</td>\n",
              "      <td>-1.143538</td>\n",
              "      <td>-1.074458</td>\n",
              "      <td>0.463469</td>\n",
              "      <td>-1.037442</td>\n",
              "      <td>0.732058</td>\n",
              "      <td>0.607057</td>\n",
              "      <td>0</td>\n",
              "      <td>Coalition Crafters</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>male</td>\n",
              "      <td>FL</td>\n",
              "      <td>18</td>\n",
              "      <td>12000</td>\n",
              "      <td>4</td>\n",
              "      <td>2</td>\n",
              "      <td>5</td>\n",
              "      <td>3</td>\n",
              "      <td>4</td>\n",
              "      <td>6</td>\n",
              "      <td>...</td>\n",
              "      <td>-1.436489</td>\n",
              "      <td>0.267324</td>\n",
              "      <td>-0.226573</td>\n",
              "      <td>0.037161</td>\n",
              "      <td>0.380209</td>\n",
              "      <td>-0.186650</td>\n",
              "      <td>-0.667546</td>\n",
              "      <td>2.071920</td>\n",
              "      <td>0</td>\n",
              "      <td>Coalition Crafters</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>male</td>\n",
              "      <td>IL</td>\n",
              "      <td>23</td>\n",
              "      <td>41000</td>\n",
              "      <td>7</td>\n",
              "      <td>5</td>\n",
              "      <td>2</td>\n",
              "      <td>5</td>\n",
              "      <td>3</td>\n",
              "      <td>4</td>\n",
              "      <td>...</td>\n",
              "      <td>0.410358</td>\n",
              "      <td>1.004055</td>\n",
              "      <td>-0.285772</td>\n",
              "      <td>-0.076289</td>\n",
              "      <td>0.321241</td>\n",
              "      <td>1.031774</td>\n",
              "      <td>0.282634</td>\n",
              "      <td>-0.299090</td>\n",
              "      <td>1</td>\n",
              "      <td>Solitary Navigators</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>male</td>\n",
              "      <td>CA</td>\n",
              "      <td>21</td>\n",
              "      <td>61000</td>\n",
              "      <td>4</td>\n",
              "      <td>3</td>\n",
              "      <td>4</td>\n",
              "      <td>6</td>\n",
              "      <td>1</td>\n",
              "      <td>2</td>\n",
              "      <td>...</td>\n",
              "      <td>0.429744</td>\n",
              "      <td>1.231411</td>\n",
              "      <td>-2.047777</td>\n",
              "      <td>0.477917</td>\n",
              "      <td>-1.066510</td>\n",
              "      <td>0.018140</td>\n",
              "      <td>-1.089635</td>\n",
              "      <td>-0.670698</td>\n",
              "      <td>0</td>\n",
              "      <td>Coalition Crafters</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>male</td>\n",
              "      <td>FL</td>\n",
              "      <td>25</td>\n",
              "      <td>59000</td>\n",
              "      <td>6</td>\n",
              "      <td>4</td>\n",
              "      <td>3</td>\n",
              "      <td>6</td>\n",
              "      <td>3</td>\n",
              "      <td>2</td>\n",
              "      <td>...</td>\n",
              "      <td>-0.011119</td>\n",
              "      <td>2.090315</td>\n",
              "      <td>-0.125512</td>\n",
              "      <td>-0.209845</td>\n",
              "      <td>1.140093</td>\n",
              "      <td>0.533272</td>\n",
              "      <td>0.203288</td>\n",
              "      <td>1.000952</td>\n",
              "      <td>0</td>\n",
              "      <td>Coalition Crafters</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>822</th>\n",
              "      <td>female</td>\n",
              "      <td>LA</td>\n",
              "      <td>22</td>\n",
              "      <td>22000</td>\n",
              "      <td>4</td>\n",
              "      <td>3</td>\n",
              "      <td>6</td>\n",
              "      <td>4</td>\n",
              "      <td>4</td>\n",
              "      <td>6</td>\n",
              "      <td>...</td>\n",
              "      <td>-1.326152</td>\n",
              "      <td>-0.287164</td>\n",
              "      <td>-1.333346</td>\n",
              "      <td>0.252281</td>\n",
              "      <td>-0.828883</td>\n",
              "      <td>-0.215843</td>\n",
              "      <td>0.621285</td>\n",
              "      <td>-0.211268</td>\n",
              "      <td>0</td>\n",
              "      <td>Coalition Crafters</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>823</th>\n",
              "      <td>female</td>\n",
              "      <td>CA</td>\n",
              "      <td>24</td>\n",
              "      <td>34000</td>\n",
              "      <td>6</td>\n",
              "      <td>7</td>\n",
              "      <td>7</td>\n",
              "      <td>6</td>\n",
              "      <td>6</td>\n",
              "      <td>6</td>\n",
              "      <td>...</td>\n",
              "      <td>1.012125</td>\n",
              "      <td>0.162894</td>\n",
              "      <td>-0.411102</td>\n",
              "      <td>0.255422</td>\n",
              "      <td>0.476538</td>\n",
              "      <td>-1.042455</td>\n",
              "      <td>0.791177</td>\n",
              "      <td>0.566828</td>\n",
              "      <td>1</td>\n",
              "      <td>Solitary Navigators</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>824</th>\n",
              "      <td>female</td>\n",
              "      <td>LA</td>\n",
              "      <td>20</td>\n",
              "      <td>25000</td>\n",
              "      <td>4</td>\n",
              "      <td>4</td>\n",
              "      <td>3</td>\n",
              "      <td>3</td>\n",
              "      <td>6</td>\n",
              "      <td>7</td>\n",
              "      <td>...</td>\n",
              "      <td>-1.129601</td>\n",
              "      <td>-0.357119</td>\n",
              "      <td>-0.614262</td>\n",
              "      <td>-0.392481</td>\n",
              "      <td>1.829287</td>\n",
              "      <td>0.812673</td>\n",
              "      <td>1.292990</td>\n",
              "      <td>0.132186</td>\n",
              "      <td>2</td>\n",
              "      <td>Party Cows</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>825</th>\n",
              "      <td>male</td>\n",
              "      <td>IL</td>\n",
              "      <td>25</td>\n",
              "      <td>56000</td>\n",
              "      <td>5</td>\n",
              "      <td>6</td>\n",
              "      <td>3</td>\n",
              "      <td>4</td>\n",
              "      <td>4</td>\n",
              "      <td>5</td>\n",
              "      <td>...</td>\n",
              "      <td>1.275060</td>\n",
              "      <td>0.661744</td>\n",
              "      <td>-0.497654</td>\n",
              "      <td>-0.823849</td>\n",
              "      <td>0.713884</td>\n",
              "      <td>-1.139296</td>\n",
              "      <td>-0.855290</td>\n",
              "      <td>0.043587</td>\n",
              "      <td>1</td>\n",
              "      <td>Solitary Navigators</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>826</th>\n",
              "      <td>male</td>\n",
              "      <td>OH</td>\n",
              "      <td>28</td>\n",
              "      <td>78000</td>\n",
              "      <td>3</td>\n",
              "      <td>3</td>\n",
              "      <td>3</td>\n",
              "      <td>5</td>\n",
              "      <td>7</td>\n",
              "      <td>5</td>\n",
              "      <td>...</td>\n",
              "      <td>-0.038773</td>\n",
              "      <td>-0.345522</td>\n",
              "      <td>-0.575890</td>\n",
              "      <td>1.730758</td>\n",
              "      <td>0.094045</td>\n",
              "      <td>0.862939</td>\n",
              "      <td>0.051342</td>\n",
              "      <td>0.031597</td>\n",
              "      <td>1</td>\n",
              "      <td>Solitary Navigators</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>827 rows × 63 columns</p>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-187c24ef-c6a0-41d1-a8d0-4b8573b7c85e')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-187c24ef-c6a0-41d1-a8d0-4b8573b7c85e button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-187c24ef-c6a0-41d1-a8d0-4b8573b7c85e');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-3b4f3fea-0810-4b73-b213-780b1b439891\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-3b4f3fea-0810-4b73-b213-780b1b439891')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-3b4f3fea-0810-4b73-b213-780b1b439891 button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "  <div id=\"id_2d28202d-23a9-4e70-ac39-309adcd40ab5\">\n",
              "    <style>\n",
              "      .colab-df-generate {\n",
              "        background-color: #E8F0FE;\n",
              "        border: none;\n",
              "        border-radius: 50%;\n",
              "        cursor: pointer;\n",
              "        display: none;\n",
              "        fill: #1967D2;\n",
              "        height: 32px;\n",
              "        padding: 0 0 0 0;\n",
              "        width: 32px;\n",
              "      }\n",
              "\n",
              "      .colab-df-generate:hover {\n",
              "        background-color: #E2EBFA;\n",
              "        box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "        fill: #174EA6;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate {\n",
              "        background-color: #3B4455;\n",
              "        fill: #D2E3FC;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate:hover {\n",
              "        background-color: #434B5C;\n",
              "        box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "        filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "        fill: #FFFFFF;\n",
              "      }\n",
              "    </style>\n",
              "    <button class=\"colab-df-generate\" onclick=\"generateWithVariable('Athena')\"\n",
              "            title=\"Generate code using this dataframe.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M7,19H8.4L18.45,9,17,7.55,7,17.6ZM5,21V16.75L18.45,3.32a2,2,0,0,1,2.83,0l1.4,1.43a1.91,1.91,0,0,1,.58,1.4,1.91,1.91,0,0,1-.58,1.4L9.25,21ZM18.45,9,17,7.55Zm-12,3A5.31,5.31,0,0,0,4.9,8.1,5.31,5.31,0,0,0,1,6.5,5.31,5.31,0,0,0,4.9,4.9,5.31,5.31,0,0,0,6.5,1,5.31,5.31,0,0,0,8.1,4.9,5.31,5.31,0,0,0,12,6.5,5.46,5.46,0,0,0,6.5,12Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "    <script>\n",
              "      (() => {\n",
              "      const buttonEl =\n",
              "        document.querySelector('#id_2d28202d-23a9-4e70-ac39-309adcd40ab5 button.colab-df-generate');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      buttonEl.onclick = () => {\n",
              "        google.colab.notebook.generateWithVariable('Athena');\n",
              "      }\n",
              "      })();\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ]
          },
          "metadata": {},
          "execution_count": 13
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "Athena.to_csv(\"ABC.csv\")"
      ],
      "metadata": {
        "id": "f89-8pdTvC2r"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "#Crosstabs\n",
        "import pandas as pd\n",
        "from scipy.stats import chi2_contingency"
      ],
      "metadata": {
        "id": "Myf83NwYUDJA"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "def xtab(d1, d2):\n",
        "    crosstab = pd.crosstab(index=d1, columns=d2)\n",
        "    chi2, p, _, expected = chi2_contingency(crosstab)\n",
        "    contributions = (crosstab - expected) ** 2 / expected\n",
        "\n",
        "    # Create a multi-index DataFrame\n",
        "    index = pd.MultiIndex.from_product([crosstab.index, ['Observed', 'Expected', 'Chi squared']])\n",
        "    columns = pd.MultiIndex.from_product([crosstab.columns])\n",
        "\n",
        "    df = pd.DataFrame(index=index, columns=columns)\n",
        "\n",
        "    # Fill in the DataFrame\n",
        "    df.loc[crosstab.index, 'Observed', :] = crosstab.values\n",
        "    df.loc[crosstab.index, 'Expected', :] = expected.round(2)\n",
        "    df.loc[crosstab.index, 'Chi squared', :] = contributions.values.round(2)\n",
        "\n",
        "    print(f\"Chi-squared value: {chi2}\")\n",
        "    print(f\"P-value: {p}\")\n",
        "    return(df)"
      ],
      "metadata": {
        "id": "0ikzMxMIceW2"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "xtab(Athena['Segment_Label'], Athena['gender'])"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 399
        },
        "id": "_c7wDxq1cnfN",
        "outputId": "7b6cc754-c307-4857-d1a7-ec9eebcb9e16"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Chi-squared value: 3.300089289882102\n",
            "P-value: 0.5089181107756044\n"
          ]
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "gender                           female    male nonbinary\n",
              "Segment_Label                                            \n",
              "Coalition Crafters  Observed        134     147         3\n",
              "                    Expected     129.47  150.07      4.46\n",
              "                    Chi squared    0.16    0.06      0.48\n",
              "Party Cows          Observed        127     150         3\n",
              "                    Expected     127.64  147.96       4.4\n",
              "                    Chi squared     0.0    0.03      0.45\n",
              "Solitary Navigators Observed        116     140         7\n",
              "                    Expected     119.89  138.97      4.13\n",
              "                    Chi squared    0.13    0.01      1.99"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-9138c8d0-d0bd-4e14-afff-9f4f839809a4\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead tr th {\n",
              "        text-align: left;\n",
              "    }\n",
              "\n",
              "    .dataframe thead tr:last-of-type th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr>\n",
              "      <th></th>\n",
              "      <th>gender</th>\n",
              "      <th>female</th>\n",
              "      <th>male</th>\n",
              "      <th>nonbinary</th>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Segment_Label</th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th rowspan=\"3\" valign=\"top\">Coalition Crafters</th>\n",
              "      <th>Observed</th>\n",
              "      <td>134</td>\n",
              "      <td>147</td>\n",
              "      <td>3</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Expected</th>\n",
              "      <td>129.47</td>\n",
              "      <td>150.07</td>\n",
              "      <td>4.46</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Chi squared</th>\n",
              "      <td>0.16</td>\n",
              "      <td>0.06</td>\n",
              "      <td>0.48</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th rowspan=\"3\" valign=\"top\">Party Cows</th>\n",
              "      <th>Observed</th>\n",
              "      <td>127</td>\n",
              "      <td>150</td>\n",
              "      <td>3</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Expected</th>\n",
              "      <td>127.64</td>\n",
              "      <td>147.96</td>\n",
              "      <td>4.4</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Chi squared</th>\n",
              "      <td>0.0</td>\n",
              "      <td>0.03</td>\n",
              "      <td>0.45</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th rowspan=\"3\" valign=\"top\">Solitary Navigators</th>\n",
              "      <th>Observed</th>\n",
              "      <td>116</td>\n",
              "      <td>140</td>\n",
              "      <td>7</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Expected</th>\n",
              "      <td>119.89</td>\n",
              "      <td>138.97</td>\n",
              "      <td>4.13</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Chi squared</th>\n",
              "      <td>0.13</td>\n",
              "      <td>0.01</td>\n",
              "      <td>1.99</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-9138c8d0-d0bd-4e14-afff-9f4f839809a4')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-9138c8d0-d0bd-4e14-afff-9f4f839809a4 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-9138c8d0-d0bd-4e14-afff-9f4f839809a4');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-cd1df747-7e8c-489b-8652-509c54a1f36f\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-cd1df747-7e8c-489b-8652-509c54a1f36f')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-cd1df747-7e8c-489b-8652-509c54a1f36f button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ]
          },
          "metadata": {},
          "execution_count": 18
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Mapping of states to regions\n",
        "state_to_region = {\n",
        "    'ME': 'East', 'NH': 'East', 'VT': 'East', 'MA': 'East', 'RI': 'East', 'CT': 'East', 'NY': 'East', 'PA': 'East', 'NJ': 'East',\n",
        "    'DE': 'East', 'MD': 'East', 'WV': 'East', 'VA': 'East', 'NC': 'East', 'SC': 'East', 'GA': 'East', 'FL': 'East',\n",
        "    'AL': 'Middle', 'TN': 'Middle', 'KY': 'Middle', 'OH': 'Middle', 'IN': 'Middle', 'MI': 'Middle', 'MS': 'Middle',\n",
        "    'IL': 'Middle', 'WI': 'Middle', 'MN': 'Middle', 'IA': 'Middle', 'MO': 'Middle', 'AR': 'Middle', 'LA': 'Middle',\n",
        "    'ND': 'Middle', 'SD': 'Middle', 'NE': 'Middle', 'KS': 'Middle', 'OK': 'Middle', 'TX': 'Middle',\n",
        "    'MT': 'West', 'WY': 'West', 'CO': 'West', 'NM': 'West', 'ID': 'West', 'UT': 'West', 'AZ': 'West', 'WA': 'West',\n",
        "    'OR': 'West', 'NV': 'West', 'CA': 'West', 'AK': 'West', 'HI': 'West'\n",
        "}\n",
        "\n",
        "# Apply the mapping to the DataFrame\n",
        "Athena['location'] = Athena['state'].map(state_to_region)\n",
        "\n",
        "# Perform the cross-tabulation with the updated regions\n",
        "xtab(Athena['Segment_Label'], Athena['location'])"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 399
        },
        "id": "Qw1ftfaOgQtO",
        "outputId": "1eeb16a6-3012-498d-c7a8-f381aab4ab1c"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Chi-squared value: 2.8976918211463443\n",
            "P-value: 0.5750898129728838\n"
          ]
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "location                           East  Middle   West\n",
              "Segment_Label                                         \n",
              "Coalition Crafters  Observed        104     105     75\n",
              "                    Expected     108.86  104.74   70.4\n",
              "                    Chi squared    0.22     0.0    0.3\n",
              "Party Cows          Observed        118      99     63\n",
              "                    Expected     107.33  103.26  69.41\n",
              "                    Chi squared    1.06    0.18   0.59\n",
              "Solitary Navigators Observed         95     101     67\n",
              "                    Expected     100.81    97.0  65.19\n",
              "                    Chi squared    0.34    0.17   0.05"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-db0a4199-c20e-4419-973d-0ff5b596f17b\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead tr th {\n",
              "        text-align: left;\n",
              "    }\n",
              "\n",
              "    .dataframe thead tr:last-of-type th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr>\n",
              "      <th></th>\n",
              "      <th>location</th>\n",
              "      <th>East</th>\n",
              "      <th>Middle</th>\n",
              "      <th>West</th>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Segment_Label</th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th rowspan=\"3\" valign=\"top\">Coalition Crafters</th>\n",
              "      <th>Observed</th>\n",
              "      <td>104</td>\n",
              "      <td>105</td>\n",
              "      <td>75</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Expected</th>\n",
              "      <td>108.86</td>\n",
              "      <td>104.74</td>\n",
              "      <td>70.4</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Chi squared</th>\n",
              "      <td>0.22</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.3</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th rowspan=\"3\" valign=\"top\">Party Cows</th>\n",
              "      <th>Observed</th>\n",
              "      <td>118</td>\n",
              "      <td>99</td>\n",
              "      <td>63</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Expected</th>\n",
              "      <td>107.33</td>\n",
              "      <td>103.26</td>\n",
              "      <td>69.41</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Chi squared</th>\n",
              "      <td>1.06</td>\n",
              "      <td>0.18</td>\n",
              "      <td>0.59</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th rowspan=\"3\" valign=\"top\">Solitary Navigators</th>\n",
              "      <th>Observed</th>\n",
              "      <td>95</td>\n",
              "      <td>101</td>\n",
              "      <td>67</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Expected</th>\n",
              "      <td>100.81</td>\n",
              "      <td>97.0</td>\n",
              "      <td>65.19</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Chi squared</th>\n",
              "      <td>0.34</td>\n",
              "      <td>0.17</td>\n",
              "      <td>0.05</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-db0a4199-c20e-4419-973d-0ff5b596f17b')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-db0a4199-c20e-4419-973d-0ff5b596f17b button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-db0a4199-c20e-4419-973d-0ff5b596f17b');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-9c5ca2eb-5289-4add-a74e-3a8bae493699\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-9c5ca2eb-5289-4add-a74e-3a8bae493699')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-9c5ca2eb-5289-4add-a74e-3a8bae493699 button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ]
          },
          "metadata": {},
          "execution_count": 19
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "age_to_category = {age: 'Young' for age in range(18, 36)}  # Assuming 'Young' is from 18 to 35\n",
        "age_to_category.update({age: 'Middle-aged' for age in range(36, 56)})  # 'Middle-aged' is 36 to 55\n",
        "age_to_category.update({age: 'Senior' for age in range(56, 66)})  # 'Senior' is 56 to 65\n",
        "\n",
        "Athena['Age_Group'] = Athena['age'].map(age_to_category)\n",
        "\n",
        "xtab(Athena['Segment_Label'], Athena['Age_Group'])"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 399
        },
        "id": "H6S-8DeBgT4l",
        "outputId": "d88ea9a8-6154-4804-f185-070509064e58"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Chi-squared value: 81.97837352315815\n",
            "P-value: 6.633761219255858e-17\n"
          ]
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "Age_Group                       Middle-aged Senior   Young\n",
              "Segment_Label                                             \n",
              "Coalition Crafters  Observed             18      1     265\n",
              "                    Expected          30.91   8.93  244.16\n",
              "                    Chi squared        5.39   7.04    1.78\n",
              "Party Cows          Observed             18      2     260\n",
              "                    Expected          30.47    8.8  240.73\n",
              "                    Chi squared         5.1   5.26    1.54\n",
              "Solitary Navigators Observed             54     23     186\n",
              "                    Expected          28.62   8.27  226.11\n",
              "                    Chi squared        22.5  26.25    7.12"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-e4480232-628a-4209-82ec-a8a26a71890d\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead tr th {\n",
              "        text-align: left;\n",
              "    }\n",
              "\n",
              "    .dataframe thead tr:last-of-type th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr>\n",
              "      <th></th>\n",
              "      <th>Age_Group</th>\n",
              "      <th>Middle-aged</th>\n",
              "      <th>Senior</th>\n",
              "      <th>Young</th>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Segment_Label</th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th rowspan=\"3\" valign=\"top\">Coalition Crafters</th>\n",
              "      <th>Observed</th>\n",
              "      <td>18</td>\n",
              "      <td>1</td>\n",
              "      <td>265</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Expected</th>\n",
              "      <td>30.91</td>\n",
              "      <td>8.93</td>\n",
              "      <td>244.16</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Chi squared</th>\n",
              "      <td>5.39</td>\n",
              "      <td>7.04</td>\n",
              "      <td>1.78</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th rowspan=\"3\" valign=\"top\">Party Cows</th>\n",
              "      <th>Observed</th>\n",
              "      <td>18</td>\n",
              "      <td>2</td>\n",
              "      <td>260</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Expected</th>\n",
              "      <td>30.47</td>\n",
              "      <td>8.8</td>\n",
              "      <td>240.73</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Chi squared</th>\n",
              "      <td>5.1</td>\n",
              "      <td>5.26</td>\n",
              "      <td>1.54</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th rowspan=\"3\" valign=\"top\">Solitary Navigators</th>\n",
              "      <th>Observed</th>\n",
              "      <td>54</td>\n",
              "      <td>23</td>\n",
              "      <td>186</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Expected</th>\n",
              "      <td>28.62</td>\n",
              "      <td>8.27</td>\n",
              "      <td>226.11</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Chi squared</th>\n",
              "      <td>22.5</td>\n",
              "      <td>26.25</td>\n",
              "      <td>7.12</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-e4480232-628a-4209-82ec-a8a26a71890d')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-e4480232-628a-4209-82ec-a8a26a71890d button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-e4480232-628a-4209-82ec-a8a26a71890d');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-2fb95144-1bb9-489e-bd3f-92c262486238\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-2fb95144-1bb9-489e-bd3f-92c262486238')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-2fb95144-1bb9-489e-bd3f-92c262486238 button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ]
          },
          "metadata": {},
          "execution_count": 20
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "income_to_category = {income: 'Low Income' for income in range(3000, 50001)}  # Assuming 'Low Income' is from $3,000 to $50,000\n",
        "income_to_category.update({income: 'Middle Income' for income in range(50001, 100001)})  # 'Middle Income' is $50,001 to $100,000\n",
        "income_to_category.update({income: 'High Income' for income in range(100001, 269001)})  # 'High Income' is $100,001 to $269,000\n",
        "\n",
        "Athena['Income_Group'] = Athena['income'].map(income_to_category)\n",
        "\n",
        "xtab(Athena['Segment_Label'], Athena['Income_Group'])"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 399
        },
        "id": "JlgFffCGgVD1",
        "outputId": "4ae62c9a-a88f-4113-ee24-42ebdd5728b8"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Chi-squared value: 50.12223408412309\n",
            "P-value: 3.4047731776720114e-10\n"
          ]
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "Income_Group                    High Income Low Income Middle Income\n",
              "Segment_Label                                                       \n",
              "Coalition Crafters  Observed             20        186            78\n",
              "                    Expected          26.44     164.84         92.72\n",
              "                    Chi squared        1.57       2.72          2.34\n",
              "Party Cows          Observed             17        187            76\n",
              "                    Expected          26.07     162.52         91.41\n",
              "                    Chi squared        3.16       3.69           2.6\n",
              "Solitary Navigators Observed             40        107           116\n",
              "                    Expected          24.49     152.65         85.86\n",
              "                    Chi squared        9.83      13.65         10.58"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-91dd316a-aa90-4f93-849c-b9d9f266350d\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead tr th {\n",
              "        text-align: left;\n",
              "    }\n",
              "\n",
              "    .dataframe thead tr:last-of-type th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr>\n",
              "      <th></th>\n",
              "      <th>Income_Group</th>\n",
              "      <th>High Income</th>\n",
              "      <th>Low Income</th>\n",
              "      <th>Middle Income</th>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Segment_Label</th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th rowspan=\"3\" valign=\"top\">Coalition Crafters</th>\n",
              "      <th>Observed</th>\n",
              "      <td>20</td>\n",
              "      <td>186</td>\n",
              "      <td>78</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Expected</th>\n",
              "      <td>26.44</td>\n",
              "      <td>164.84</td>\n",
              "      <td>92.72</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Chi squared</th>\n",
              "      <td>1.57</td>\n",
              "      <td>2.72</td>\n",
              "      <td>2.34</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th rowspan=\"3\" valign=\"top\">Party Cows</th>\n",
              "      <th>Observed</th>\n",
              "      <td>17</td>\n",
              "      <td>187</td>\n",
              "      <td>76</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Expected</th>\n",
              "      <td>26.07</td>\n",
              "      <td>162.52</td>\n",
              "      <td>91.41</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Chi squared</th>\n",
              "      <td>3.16</td>\n",
              "      <td>3.69</td>\n",
              "      <td>2.6</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th rowspan=\"3\" valign=\"top\">Solitary Navigators</th>\n",
              "      <th>Observed</th>\n",
              "      <td>40</td>\n",
              "      <td>107</td>\n",
              "      <td>116</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Expected</th>\n",
              "      <td>24.49</td>\n",
              "      <td>152.65</td>\n",
              "      <td>85.86</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Chi squared</th>\n",
              "      <td>9.83</td>\n",
              "      <td>13.65</td>\n",
              "      <td>10.58</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-91dd316a-aa90-4f93-849c-b9d9f266350d')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-91dd316a-aa90-4f93-849c-b9d9f266350d button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-91dd316a-aa90-4f93-849c-b9d9f266350d');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-a798c9a9-aa0d-43f1-a93e-b55a191e52f5\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-a798c9a9-aa0d-43f1-a93e-b55a191e52f5')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-a798c9a9-aa0d-43f1-a93e-b55a191e52f5 button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ]
          },
          "metadata": {},
          "execution_count": 21
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "Athena"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 530
        },
        "id": "eAn7Uj1GyBum",
        "outputId": "536ffa12-0dc8-4769-fe49-e54e1c0ed095"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "     gender state  age  income  imp.challenge  imp.unlocks  imp.customize  \\\n",
              "0    female    AZ   24   54000              5            6              7   \n",
              "1      male    FL   18   12000              4            2              5   \n",
              "2      male    IL   23   41000              7            5              2   \n",
              "3      male    CA   21   61000              4            3              4   \n",
              "4      male    FL   25   59000              6            4              3   \n",
              "..      ...   ...  ...     ...            ...          ...            ...   \n",
              "822  female    LA   22   22000              4            3              6   \n",
              "823  female    CA   24   34000              6            7              7   \n",
              "824  female    LA   20   25000              4            4              3   \n",
              "825    male    IL   25   56000              5            6              3   \n",
              "826    male    OH   28   78000              3            3              3   \n",
              "\n",
              "     imp.difficulty  imp.characters  imp.storyline  ...  Explorer  Effortless  \\\n",
              "0                 4               6              5  ... -1.074458    0.463469   \n",
              "1                 3               4              6  ...  0.037161    0.380209   \n",
              "2                 5               3              4  ... -0.076289    0.321241   \n",
              "3                 6               1              2  ...  0.477917   -1.066510   \n",
              "4                 6               3              2  ... -0.209845    1.140093   \n",
              "..              ...             ...            ...  ...       ...         ...   \n",
              "822               4               4              6  ...  0.252281   -0.828883   \n",
              "823               6               6              6  ...  0.255422    0.476538   \n",
              "824               3               6              7  ... -0.392481    1.829287   \n",
              "825               4               4              5  ... -0.823849    0.713884   \n",
              "826               5               7              5  ...  1.730758    0.094045   \n",
              "\n",
              "     Daredevil  Achievement Hunter  Calm Commander  Cluster  \\\n",
              "0    -1.037442            0.732058        0.607057        0   \n",
              "1    -0.186650           -0.667546        2.071920        0   \n",
              "2     1.031774            0.282634       -0.299090        1   \n",
              "3     0.018140           -1.089635       -0.670698        0   \n",
              "4     0.533272            0.203288        1.000952        0   \n",
              "..         ...                 ...             ...      ...   \n",
              "822  -0.215843            0.621285       -0.211268        0   \n",
              "823  -1.042455            0.791177        0.566828        1   \n",
              "824   0.812673            1.292990        0.132186        2   \n",
              "825  -1.139296           -0.855290        0.043587        1   \n",
              "826   0.862939            0.051342        0.031597        1   \n",
              "\n",
              "           Segment_Label  location  Age_Group   Income_Group  \n",
              "0     Coalition Crafters      West      Young  Middle Income  \n",
              "1     Coalition Crafters      East      Young     Low Income  \n",
              "2    Solitary Navigators    Middle      Young     Low Income  \n",
              "3     Coalition Crafters      West      Young  Middle Income  \n",
              "4     Coalition Crafters      East      Young  Middle Income  \n",
              "..                   ...       ...        ...            ...  \n",
              "822   Coalition Crafters    Middle      Young     Low Income  \n",
              "823  Solitary Navigators      West      Young     Low Income  \n",
              "824           Party Cows    Middle      Young     Low Income  \n",
              "825  Solitary Navigators    Middle      Young  Middle Income  \n",
              "826  Solitary Navigators    Middle      Young  Middle Income  \n",
              "\n",
              "[827 rows x 66 columns]"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-e03adc43-dc7c-4b42-9d5f-3108c0a95d6f\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>gender</th>\n",
              "      <th>state</th>\n",
              "      <th>age</th>\n",
              "      <th>income</th>\n",
              "      <th>imp.challenge</th>\n",
              "      <th>imp.unlocks</th>\n",
              "      <th>imp.customize</th>\n",
              "      <th>imp.difficulty</th>\n",
              "      <th>imp.characters</th>\n",
              "      <th>imp.storyline</th>\n",
              "      <th>...</th>\n",
              "      <th>Explorer</th>\n",
              "      <th>Effortless</th>\n",
              "      <th>Daredevil</th>\n",
              "      <th>Achievement Hunter</th>\n",
              "      <th>Calm Commander</th>\n",
              "      <th>Cluster</th>\n",
              "      <th>Segment_Label</th>\n",
              "      <th>location</th>\n",
              "      <th>Age_Group</th>\n",
              "      <th>Income_Group</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>female</td>\n",
              "      <td>AZ</td>\n",
              "      <td>24</td>\n",
              "      <td>54000</td>\n",
              "      <td>5</td>\n",
              "      <td>6</td>\n",
              "      <td>7</td>\n",
              "      <td>4</td>\n",
              "      <td>6</td>\n",
              "      <td>5</td>\n",
              "      <td>...</td>\n",
              "      <td>-1.074458</td>\n",
              "      <td>0.463469</td>\n",
              "      <td>-1.037442</td>\n",
              "      <td>0.732058</td>\n",
              "      <td>0.607057</td>\n",
              "      <td>0</td>\n",
              "      <td>Coalition Crafters</td>\n",
              "      <td>West</td>\n",
              "      <td>Young</td>\n",
              "      <td>Middle Income</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>male</td>\n",
              "      <td>FL</td>\n",
              "      <td>18</td>\n",
              "      <td>12000</td>\n",
              "      <td>4</td>\n",
              "      <td>2</td>\n",
              "      <td>5</td>\n",
              "      <td>3</td>\n",
              "      <td>4</td>\n",
              "      <td>6</td>\n",
              "      <td>...</td>\n",
              "      <td>0.037161</td>\n",
              "      <td>0.380209</td>\n",
              "      <td>-0.186650</td>\n",
              "      <td>-0.667546</td>\n",
              "      <td>2.071920</td>\n",
              "      <td>0</td>\n",
              "      <td>Coalition Crafters</td>\n",
              "      <td>East</td>\n",
              "      <td>Young</td>\n",
              "      <td>Low Income</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>male</td>\n",
              "      <td>IL</td>\n",
              "      <td>23</td>\n",
              "      <td>41000</td>\n",
              "      <td>7</td>\n",
              "      <td>5</td>\n",
              "      <td>2</td>\n",
              "      <td>5</td>\n",
              "      <td>3</td>\n",
              "      <td>4</td>\n",
              "      <td>...</td>\n",
              "      <td>-0.076289</td>\n",
              "      <td>0.321241</td>\n",
              "      <td>1.031774</td>\n",
              "      <td>0.282634</td>\n",
              "      <td>-0.299090</td>\n",
              "      <td>1</td>\n",
              "      <td>Solitary Navigators</td>\n",
              "      <td>Middle</td>\n",
              "      <td>Young</td>\n",
              "      <td>Low Income</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>male</td>\n",
              "      <td>CA</td>\n",
              "      <td>21</td>\n",
              "      <td>61000</td>\n",
              "      <td>4</td>\n",
              "      <td>3</td>\n",
              "      <td>4</td>\n",
              "      <td>6</td>\n",
              "      <td>1</td>\n",
              "      <td>2</td>\n",
              "      <td>...</td>\n",
              "      <td>0.477917</td>\n",
              "      <td>-1.066510</td>\n",
              "      <td>0.018140</td>\n",
              "      <td>-1.089635</td>\n",
              "      <td>-0.670698</td>\n",
              "      <td>0</td>\n",
              "      <td>Coalition Crafters</td>\n",
              "      <td>West</td>\n",
              "      <td>Young</td>\n",
              "      <td>Middle Income</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>male</td>\n",
              "      <td>FL</td>\n",
              "      <td>25</td>\n",
              "      <td>59000</td>\n",
              "      <td>6</td>\n",
              "      <td>4</td>\n",
              "      <td>3</td>\n",
              "      <td>6</td>\n",
              "      <td>3</td>\n",
              "      <td>2</td>\n",
              "      <td>...</td>\n",
              "      <td>-0.209845</td>\n",
              "      <td>1.140093</td>\n",
              "      <td>0.533272</td>\n",
              "      <td>0.203288</td>\n",
              "      <td>1.000952</td>\n",
              "      <td>0</td>\n",
              "      <td>Coalition Crafters</td>\n",
              "      <td>East</td>\n",
              "      <td>Young</td>\n",
              "      <td>Middle Income</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>822</th>\n",
              "      <td>female</td>\n",
              "      <td>LA</td>\n",
              "      <td>22</td>\n",
              "      <td>22000</td>\n",
              "      <td>4</td>\n",
              "      <td>3</td>\n",
              "      <td>6</td>\n",
              "      <td>4</td>\n",
              "      <td>4</td>\n",
              "      <td>6</td>\n",
              "      <td>...</td>\n",
              "      <td>0.252281</td>\n",
              "      <td>-0.828883</td>\n",
              "      <td>-0.215843</td>\n",
              "      <td>0.621285</td>\n",
              "      <td>-0.211268</td>\n",
              "      <td>0</td>\n",
              "      <td>Coalition Crafters</td>\n",
              "      <td>Middle</td>\n",
              "      <td>Young</td>\n",
              "      <td>Low Income</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>823</th>\n",
              "      <td>female</td>\n",
              "      <td>CA</td>\n",
              "      <td>24</td>\n",
              "      <td>34000</td>\n",
              "      <td>6</td>\n",
              "      <td>7</td>\n",
              "      <td>7</td>\n",
              "      <td>6</td>\n",
              "      <td>6</td>\n",
              "      <td>6</td>\n",
              "      <td>...</td>\n",
              "      <td>0.255422</td>\n",
              "      <td>0.476538</td>\n",
              "      <td>-1.042455</td>\n",
              "      <td>0.791177</td>\n",
              "      <td>0.566828</td>\n",
              "      <td>1</td>\n",
              "      <td>Solitary Navigators</td>\n",
              "      <td>West</td>\n",
              "      <td>Young</td>\n",
              "      <td>Low Income</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>824</th>\n",
              "      <td>female</td>\n",
              "      <td>LA</td>\n",
              "      <td>20</td>\n",
              "      <td>25000</td>\n",
              "      <td>4</td>\n",
              "      <td>4</td>\n",
              "      <td>3</td>\n",
              "      <td>3</td>\n",
              "      <td>6</td>\n",
              "      <td>7</td>\n",
              "      <td>...</td>\n",
              "      <td>-0.392481</td>\n",
              "      <td>1.829287</td>\n",
              "      <td>0.812673</td>\n",
              "      <td>1.292990</td>\n",
              "      <td>0.132186</td>\n",
              "      <td>2</td>\n",
              "      <td>Party Cows</td>\n",
              "      <td>Middle</td>\n",
              "      <td>Young</td>\n",
              "      <td>Low Income</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>825</th>\n",
              "      <td>male</td>\n",
              "      <td>IL</td>\n",
              "      <td>25</td>\n",
              "      <td>56000</td>\n",
              "      <td>5</td>\n",
              "      <td>6</td>\n",
              "      <td>3</td>\n",
              "      <td>4</td>\n",
              "      <td>4</td>\n",
              "      <td>5</td>\n",
              "      <td>...</td>\n",
              "      <td>-0.823849</td>\n",
              "      <td>0.713884</td>\n",
              "      <td>-1.139296</td>\n",
              "      <td>-0.855290</td>\n",
              "      <td>0.043587</td>\n",
              "      <td>1</td>\n",
              "      <td>Solitary Navigators</td>\n",
              "      <td>Middle</td>\n",
              "      <td>Young</td>\n",
              "      <td>Middle Income</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>826</th>\n",
              "      <td>male</td>\n",
              "      <td>OH</td>\n",
              "      <td>28</td>\n",
              "      <td>78000</td>\n",
              "      <td>3</td>\n",
              "      <td>3</td>\n",
              "      <td>3</td>\n",
              "      <td>5</td>\n",
              "      <td>7</td>\n",
              "      <td>5</td>\n",
              "      <td>...</td>\n",
              "      <td>1.730758</td>\n",
              "      <td>0.094045</td>\n",
              "      <td>0.862939</td>\n",
              "      <td>0.051342</td>\n",
              "      <td>0.031597</td>\n",
              "      <td>1</td>\n",
              "      <td>Solitary Navigators</td>\n",
              "      <td>Middle</td>\n",
              "      <td>Young</td>\n",
              "      <td>Middle Income</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>827 rows × 66 columns</p>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-e03adc43-dc7c-4b42-9d5f-3108c0a95d6f')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-e03adc43-dc7c-4b42-9d5f-3108c0a95d6f button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-e03adc43-dc7c-4b42-9d5f-3108c0a95d6f');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-fe6e713c-991c-454b-87d3-c8c2ced3261c\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-fe6e713c-991c-454b-87d3-c8c2ced3261c')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-fe6e713c-991c-454b-87d3-c8c2ced3261c button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "  <div id=\"id_fa747234-dc82-48fc-b7f4-62dd71e05e63\">\n",
              "    <style>\n",
              "      .colab-df-generate {\n",
              "        background-color: #E8F0FE;\n",
              "        border: none;\n",
              "        border-radius: 50%;\n",
              "        cursor: pointer;\n",
              "        display: none;\n",
              "        fill: #1967D2;\n",
              "        height: 32px;\n",
              "        padding: 0 0 0 0;\n",
              "        width: 32px;\n",
              "      }\n",
              "\n",
              "      .colab-df-generate:hover {\n",
              "        background-color: #E2EBFA;\n",
              "        box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "        fill: #174EA6;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate {\n",
              "        background-color: #3B4455;\n",
              "        fill: #D2E3FC;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate:hover {\n",
              "        background-color: #434B5C;\n",
              "        box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "        filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "        fill: #FFFFFF;\n",
              "      }\n",
              "    </style>\n",
              "    <button class=\"colab-df-generate\" onclick=\"generateWithVariable('Athena')\"\n",
              "            title=\"Generate code using this dataframe.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M7,19H8.4L18.45,9,17,7.55,7,17.6ZM5,21V16.75L18.45,3.32a2,2,0,0,1,2.83,0l1.4,1.43a1.91,1.91,0,0,1,.58,1.4,1.91,1.91,0,0,1-.58,1.4L9.25,21ZM18.45,9,17,7.55Zm-12,3A5.31,5.31,0,0,0,4.9,8.1,5.31,5.31,0,0,0,1,6.5,5.31,5.31,0,0,0,4.9,4.9,5.31,5.31,0,0,0,6.5,1,5.31,5.31,0,0,0,8.1,4.9,5.31,5.31,0,0,0,12,6.5,5.46,5.46,0,0,0,6.5,12Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "    <script>\n",
              "      (() => {\n",
              "      const buttonEl =\n",
              "        document.querySelector('#id_fa747234-dc82-48fc-b7f4-62dd71e05e63 button.colab-df-generate');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      buttonEl.onclick = () => {\n",
              "        google.colab.notebook.generateWithVariable('Athena');\n",
              "      }\n",
              "      })();\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ]
          },
          "metadata": {},
          "execution_count": 28
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#3C\n",
        "import statsmodels.api as sm\n",
        "\n",
        "x= pd.get_dummies(Athena['Cluster'], drop_first=True, dtype=int)\n",
        "x= sm.add_constant(x)\n",
        "y= Athena['age']\n",
        "model=sm.OLS(y,x).fit()\n",
        "model.summary()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 473
        },
        "id": "J2VtKvI2y58N",
        "outputId": "5e7d5fb8-53a3-4d9d-c529-00a08ced9b90"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<class 'statsmodels.iolib.summary.Summary'>\n",
              "\"\"\"\n",
              "                            OLS Regression Results                            \n",
              "==============================================================================\n",
              "Dep. Variable:                    age   R-squared:                       0.150\n",
              "Model:                            OLS   Adj. R-squared:                  0.148\n",
              "Method:                 Least Squares   F-statistic:                     72.47\n",
              "Date:                Sat, 16 Dec 2023   Prob (F-statistic):           1.02e-29\n",
              "Time:                        22:47:07   Log-Likelihood:                -2980.6\n",
              "No. Observations:                 827   AIC:                             5967.\n",
              "Df Residuals:                     824   BIC:                             5981.\n",
              "Df Model:                           2                                         \n",
              "Covariance Type:            nonrobust                                         \n",
              "==============================================================================\n",
              "                 coef    std err          t      P>|t|      [0.025      0.975]\n",
              "------------------------------------------------------------------------------\n",
              "const         24.8310      0.529     46.972      0.000      23.793      25.869\n",
              "1              8.1234      0.762     10.655      0.000       6.627       9.620\n",
              "2              0.2369      0.750      0.316      0.752      -1.236       1.710\n",
              "==============================================================================\n",
              "Omnibus:                      219.338   Durbin-Watson:                   1.937\n",
              "Prob(Omnibus):                  0.000   Jarque-Bera (JB):              494.023\n",
              "Skew:                           1.437   Prob(JB):                    5.30e-108\n",
              "Kurtosis:                       5.466   Cond. No.                         3.69\n",
              "==============================================================================\n",
              "\n",
              "Notes:\n",
              "[1] Standard Errors assume that the covariance matrix of the errors is correctly specified.\n",
              "\"\"\""
            ],
            "text/html": [
              "<table class=\"simpletable\">\n",
              "<caption>OLS Regression Results</caption>\n",
              "<tr>\n",
              "  <th>Dep. Variable:</th>           <td>age</td>       <th>  R-squared:         </th> <td>   0.150</td>\n",
              "</tr>\n",
              "<tr>\n",
              "  <th>Model:</th>                   <td>OLS</td>       <th>  Adj. R-squared:    </th> <td>   0.148</td>\n",
              "</tr>\n",
              "<tr>\n",
              "  <th>Method:</th>             <td>Least Squares</td>  <th>  F-statistic:       </th> <td>   72.47</td>\n",
              "</tr>\n",
              "<tr>\n",
              "  <th>Date:</th>             <td>Sat, 16 Dec 2023</td> <th>  Prob (F-statistic):</th> <td>1.02e-29</td>\n",
              "</tr>\n",
              "<tr>\n",
              "  <th>Time:</th>                 <td>22:47:07</td>     <th>  Log-Likelihood:    </th> <td> -2980.6</td>\n",
              "</tr>\n",
              "<tr>\n",
              "  <th>No. Observations:</th>      <td>   827</td>      <th>  AIC:               </th> <td>   5967.</td>\n",
              "</tr>\n",
              "<tr>\n",
              "  <th>Df Residuals:</th>          <td>   824</td>      <th>  BIC:               </th> <td>   5981.</td>\n",
              "</tr>\n",
              "<tr>\n",
              "  <th>Df Model:</th>              <td>     2</td>      <th>                     </th>     <td> </td>   \n",
              "</tr>\n",
              "<tr>\n",
              "  <th>Covariance Type:</th>      <td>nonrobust</td>    <th>                     </th>     <td> </td>   \n",
              "</tr>\n",
              "</table>\n",
              "<table class=\"simpletable\">\n",
              "<tr>\n",
              "    <td></td>       <th>coef</th>     <th>std err</th>      <th>t</th>      <th>P>|t|</th>  <th>[0.025</th>    <th>0.975]</th>  \n",
              "</tr>\n",
              "<tr>\n",
              "  <th>const</th> <td>   24.8310</td> <td>    0.529</td> <td>   46.972</td> <td> 0.000</td> <td>   23.793</td> <td>   25.869</td>\n",
              "</tr>\n",
              "<tr>\n",
              "  <th>1</th>     <td>    8.1234</td> <td>    0.762</td> <td>   10.655</td> <td> 0.000</td> <td>    6.627</td> <td>    9.620</td>\n",
              "</tr>\n",
              "<tr>\n",
              "  <th>2</th>     <td>    0.2369</td> <td>    0.750</td> <td>    0.316</td> <td> 0.752</td> <td>   -1.236</td> <td>    1.710</td>\n",
              "</tr>\n",
              "</table>\n",
              "<table class=\"simpletable\">\n",
              "<tr>\n",
              "  <th>Omnibus:</th>       <td>219.338</td> <th>  Durbin-Watson:     </th> <td>   1.937</td> \n",
              "</tr>\n",
              "<tr>\n",
              "  <th>Prob(Omnibus):</th> <td> 0.000</td>  <th>  Jarque-Bera (JB):  </th> <td> 494.023</td> \n",
              "</tr>\n",
              "<tr>\n",
              "  <th>Skew:</th>          <td> 1.437</td>  <th>  Prob(JB):          </th> <td>5.30e-108</td>\n",
              "</tr>\n",
              "<tr>\n",
              "  <th>Kurtosis:</th>      <td> 5.466</td>  <th>  Cond. No.          </th> <td>    3.69</td> \n",
              "</tr>\n",
              "</table><br/><br/>Notes:<br/>[1] Standard Errors assume that the covariance matrix of the errors is correctly specified."
            ],
            "text/latex": "\\begin{center}\n\\begin{tabular}{lclc}\n\\toprule\n\\textbf{Dep. Variable:}    &       age        & \\textbf{  R-squared:         } &     0.150   \\\\\n\\textbf{Model:}            &       OLS        & \\textbf{  Adj. R-squared:    } &     0.148   \\\\\n\\textbf{Method:}           &  Least Squares   & \\textbf{  F-statistic:       } &     72.47   \\\\\n\\textbf{Date:}             & Sat, 16 Dec 2023 & \\textbf{  Prob (F-statistic):} &  1.02e-29   \\\\\n\\textbf{Time:}             &     22:47:07     & \\textbf{  Log-Likelihood:    } &   -2980.6   \\\\\n\\textbf{No. Observations:} &         827      & \\textbf{  AIC:               } &     5967.   \\\\\n\\textbf{Df Residuals:}     &         824      & \\textbf{  BIC:               } &     5981.   \\\\\n\\textbf{Df Model:}         &           2      & \\textbf{                     } &             \\\\\n\\textbf{Covariance Type:}  &    nonrobust     & \\textbf{                     } &             \\\\\n\\bottomrule\n\\end{tabular}\n\\begin{tabular}{lcccccc}\n               & \\textbf{coef} & \\textbf{std err} & \\textbf{t} & \\textbf{P$> |$t$|$} & \\textbf{[0.025} & \\textbf{0.975]}  \\\\\n\\midrule\n\\textbf{const} &      24.8310  &        0.529     &    46.972  &         0.000        &       23.793    &       25.869     \\\\\n\\textbf{1}     &       8.1234  &        0.762     &    10.655  &         0.000        &        6.627    &        9.620     \\\\\n\\textbf{2}     &       0.2369  &        0.750     &     0.316  &         0.752        &       -1.236    &        1.710     \\\\\n\\bottomrule\n\\end{tabular}\n\\begin{tabular}{lclc}\n\\textbf{Omnibus:}       & 219.338 & \\textbf{  Durbin-Watson:     } &     1.937  \\\\\n\\textbf{Prob(Omnibus):} &   0.000 & \\textbf{  Jarque-Bera (JB):  } &   494.023  \\\\\n\\textbf{Skew:}          &   1.437 & \\textbf{  Prob(JB):          } & 5.30e-108  \\\\\n\\textbf{Kurtosis:}      &   5.466 & \\textbf{  Cond. No.          } &      3.69  \\\\\n\\bottomrule\n\\end{tabular}\n%\\caption{OLS Regression Results}\n\\end{center}\n\nNotes: \\newline\n [1] Standard Errors assume that the covariance matrix of the errors is correctly specified."
          },
          "metadata": {},
          "execution_count": 46
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#3C\n",
        "import statsmodels.api as sm\n",
        "\n",
        "x= pd.get_dummies(Athena['Cluster'], drop_first=True, dtype=int)\n",
        "x= sm.add_constant(x)\n",
        "y= Athena['income']\n",
        "model=sm.OLS(y,x).fit()\n",
        "model.summary()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 473
        },
        "id": "B7Et5jI20Kpg",
        "outputId": "b31b4b6a-0846-4ba1-b538-c218bab9713d"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<class 'statsmodels.iolib.summary.Summary'>\n",
              "\"\"\"\n",
              "                            OLS Regression Results                            \n",
              "==============================================================================\n",
              "Dep. Variable:                 income   R-squared:                       0.054\n",
              "Model:                            OLS   Adj. R-squared:                  0.051\n",
              "Method:                 Least Squares   F-statistic:                     23.33\n",
              "Date:                Sat, 16 Dec 2023   Prob (F-statistic):           1.39e-10\n",
              "Time:                        22:48:07   Log-Likelihood:                -9772.9\n",
              "No. Observations:                 827   AIC:                         1.955e+04\n",
              "Df Residuals:                     824   BIC:                         1.957e+04\n",
              "Df Model:                           2                                         \n",
              "Covariance Type:            nonrobust                                         \n",
              "==============================================================================\n",
              "                 coef    std err          t      P>|t|      [0.025      0.975]\n",
              "------------------------------------------------------------------------------\n",
              "const       4.609e+04   1950.268     23.633      0.000    4.23e+04    4.99e+04\n",
              "1           1.711e+04   2812.613      6.083      0.000    1.16e+04    2.26e+04\n",
              "2            722.7364   2767.928      0.261      0.794   -4710.283    6155.756\n",
              "==============================================================================\n",
              "Omnibus:                      224.519   Durbin-Watson:                   1.985\n",
              "Prob(Omnibus):                  0.000   Jarque-Bera (JB):              645.477\n",
              "Skew:                           1.348   Prob(JB):                    6.86e-141\n",
              "Kurtosis:                       6.386   Cond. No.                         3.69\n",
              "==============================================================================\n",
              "\n",
              "Notes:\n",
              "[1] Standard Errors assume that the covariance matrix of the errors is correctly specified.\n",
              "\"\"\""
            ],
            "text/html": [
              "<table class=\"simpletable\">\n",
              "<caption>OLS Regression Results</caption>\n",
              "<tr>\n",
              "  <th>Dep. Variable:</th>         <td>income</td>      <th>  R-squared:         </th> <td>   0.054</td> \n",
              "</tr>\n",
              "<tr>\n",
              "  <th>Model:</th>                   <td>OLS</td>       <th>  Adj. R-squared:    </th> <td>   0.051</td> \n",
              "</tr>\n",
              "<tr>\n",
              "  <th>Method:</th>             <td>Least Squares</td>  <th>  F-statistic:       </th> <td>   23.33</td> \n",
              "</tr>\n",
              "<tr>\n",
              "  <th>Date:</th>             <td>Sat, 16 Dec 2023</td> <th>  Prob (F-statistic):</th> <td>1.39e-10</td> \n",
              "</tr>\n",
              "<tr>\n",
              "  <th>Time:</th>                 <td>22:48:07</td>     <th>  Log-Likelihood:    </th> <td> -9772.9</td> \n",
              "</tr>\n",
              "<tr>\n",
              "  <th>No. Observations:</th>      <td>   827</td>      <th>  AIC:               </th> <td>1.955e+04</td>\n",
              "</tr>\n",
              "<tr>\n",
              "  <th>Df Residuals:</th>          <td>   824</td>      <th>  BIC:               </th> <td>1.957e+04</td>\n",
              "</tr>\n",
              "<tr>\n",
              "  <th>Df Model:</th>              <td>     2</td>      <th>                     </th>     <td> </td>    \n",
              "</tr>\n",
              "<tr>\n",
              "  <th>Covariance Type:</th>      <td>nonrobust</td>    <th>                     </th>     <td> </td>    \n",
              "</tr>\n",
              "</table>\n",
              "<table class=\"simpletable\">\n",
              "<tr>\n",
              "    <td></td>       <th>coef</th>     <th>std err</th>      <th>t</th>      <th>P>|t|</th>  <th>[0.025</th>    <th>0.975]</th>  \n",
              "</tr>\n",
              "<tr>\n",
              "  <th>const</th> <td> 4.609e+04</td> <td> 1950.268</td> <td>   23.633</td> <td> 0.000</td> <td> 4.23e+04</td> <td> 4.99e+04</td>\n",
              "</tr>\n",
              "<tr>\n",
              "  <th>1</th>     <td> 1.711e+04</td> <td> 2812.613</td> <td>    6.083</td> <td> 0.000</td> <td> 1.16e+04</td> <td> 2.26e+04</td>\n",
              "</tr>\n",
              "<tr>\n",
              "  <th>2</th>     <td>  722.7364</td> <td> 2767.928</td> <td>    0.261</td> <td> 0.794</td> <td>-4710.283</td> <td> 6155.756</td>\n",
              "</tr>\n",
              "</table>\n",
              "<table class=\"simpletable\">\n",
              "<tr>\n",
              "  <th>Omnibus:</th>       <td>224.519</td> <th>  Durbin-Watson:     </th> <td>   1.985</td> \n",
              "</tr>\n",
              "<tr>\n",
              "  <th>Prob(Omnibus):</th> <td> 0.000</td>  <th>  Jarque-Bera (JB):  </th> <td> 645.477</td> \n",
              "</tr>\n",
              "<tr>\n",
              "  <th>Skew:</th>          <td> 1.348</td>  <th>  Prob(JB):          </th> <td>6.86e-141</td>\n",
              "</tr>\n",
              "<tr>\n",
              "  <th>Kurtosis:</th>      <td> 6.386</td>  <th>  Cond. No.          </th> <td>    3.69</td> \n",
              "</tr>\n",
              "</table><br/><br/>Notes:<br/>[1] Standard Errors assume that the covariance matrix of the errors is correctly specified."
            ],
            "text/latex": "\\begin{center}\n\\begin{tabular}{lclc}\n\\toprule\n\\textbf{Dep. Variable:}    &      income      & \\textbf{  R-squared:         } &     0.054   \\\\\n\\textbf{Model:}            &       OLS        & \\textbf{  Adj. R-squared:    } &     0.051   \\\\\n\\textbf{Method:}           &  Least Squares   & \\textbf{  F-statistic:       } &     23.33   \\\\\n\\textbf{Date:}             & Sat, 16 Dec 2023 & \\textbf{  Prob (F-statistic):} &  1.39e-10   \\\\\n\\textbf{Time:}             &     22:48:07     & \\textbf{  Log-Likelihood:    } &   -9772.9   \\\\\n\\textbf{No. Observations:} &         827      & \\textbf{  AIC:               } & 1.955e+04   \\\\\n\\textbf{Df Residuals:}     &         824      & \\textbf{  BIC:               } & 1.957e+04   \\\\\n\\textbf{Df Model:}         &           2      & \\textbf{                     } &             \\\\\n\\textbf{Covariance Type:}  &    nonrobust     & \\textbf{                     } &             \\\\\n\\bottomrule\n\\end{tabular}\n\\begin{tabular}{lcccccc}\n               & \\textbf{coef} & \\textbf{std err} & \\textbf{t} & \\textbf{P$> |$t$|$} & \\textbf{[0.025} & \\textbf{0.975]}  \\\\\n\\midrule\n\\textbf{const} &    4.609e+04  &     1950.268     &    23.633  &         0.000        &     4.23e+04    &     4.99e+04     \\\\\n\\textbf{1}     &    1.711e+04  &     2812.613     &     6.083  &         0.000        &     1.16e+04    &     2.26e+04     \\\\\n\\textbf{2}     &     722.7364  &     2767.928     &     0.261  &         0.794        &    -4710.283    &     6155.756     \\\\\n\\bottomrule\n\\end{tabular}\n\\begin{tabular}{lclc}\n\\textbf{Omnibus:}       & 224.519 & \\textbf{  Durbin-Watson:     } &     1.985  \\\\\n\\textbf{Prob(Omnibus):} &   0.000 & \\textbf{  Jarque-Bera (JB):  } &   645.477  \\\\\n\\textbf{Skew:}          &   1.348 & \\textbf{  Prob(JB):          } & 6.86e-141  \\\\\n\\textbf{Kurtosis:}      &   6.386 & \\textbf{  Cond. No.          } &      3.69  \\\\\n\\bottomrule\n\\end{tabular}\n%\\caption{OLS Regression Results}\n\\end{center}\n\nNotes: \\newline\n [1] Standard Errors assume that the covariance matrix of the errors is correctly specified."
          },
          "metadata": {},
          "execution_count": 47
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import pandas as pd\n",
        "import statsmodels.api as sm\n",
        "\n",
        "# Map your categorical labels to a numeric value\n",
        "label_mapping = {\n",
        "    'Coalition Crafters': 0,\n",
        "    'Solitary Navigators': 1,\n",
        "    'Party Cows': 2\n",
        "}\n",
        "\n",
        "# Apply the mapping to your dataframe\n",
        "Athena['Segment_Label_Encoded'] = Athena['Segment_Label'].map(label_mapping)\n",
        "\n",
        "# Now, 'Segment_Label_Encoded' is a numeric representation of your categorical data\n",
        "\n",
        "# Generate dummy variables for the 'age' column\n",
        "X = pd.get_dummies(Athena['age'], drop_first=True, dtype=int)\n",
        "X = sm.add_constant(X)\n",
        "\n",
        "# Specify the dependent variable\n",
        "y = Athena['Segment_Label_Encoded']\n",
        "\n",
        "# Fit the multinomial logistic regression model\n",
        "mnlogit_model = sm.MNLogit(y, X).fit()\n",
        "\n",
        "# Get the summary of the regression\n",
        "summary = mnlogit_model.summary()\n",
        "\n",
        "# Print the summary\n",
        "print(summary)\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "nTrZv1M_xPdt",
        "outputId": "6455f5ff-bf10-4bc6-ef70-4b108f7f5e08"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Warning: Maximum number of iterations has been exceeded.\n",
            "         Current function value: 0.983511\n",
            "         Iterations: 35\n",
            "                            MNLogit Regression Results                           \n",
            "=================================================================================\n",
            "Dep. Variable:     Segment_Label_Encoded   No. Observations:                  827\n",
            "Model:                           MNLogit   Df Residuals:                      733\n",
            "Method:                              MLE   Df Model:                           92\n",
            "Date:                   Sat, 16 Dec 2023   Pseudo R-squ.:                  0.1043\n",
            "Time:                           22:41:22   Log-Likelihood:                -813.36\n",
            "converged:                         False   LL-Null:                       -908.10\n",
            "Covariance Type:               nonrobust   LLR p-value:                 9.885e-09\n",
            "===========================================================================================\n",
            "Segment_Label_Encoded=1       coef    std err          z      P>|z|      [0.025      0.975]\n",
            "-------------------------------------------------------------------------------------------\n",
            "const                      -1.4271      0.455     -3.139      0.002      -2.318      -0.536\n",
            "19                          0.2640      0.581      0.454      0.650      -0.875       1.403\n",
            "20                          0.8566      0.572      1.498      0.134      -0.264       1.977\n",
            "21                          1.1394      0.594      1.919      0.055      -0.024       2.303\n",
            "22                          0.4577      0.576      0.794      0.427      -0.672       1.587\n",
            "23                          0.5669      0.580      0.978      0.328      -0.569       1.703\n",
            "24                          1.2040      0.597      2.016      0.044       0.033       2.374\n",
            "25                          1.0906      0.567      1.925      0.054      -0.020       2.201\n",
            "26                          1.1860      0.607      1.952      0.051      -0.005       2.377\n",
            "27                          0.7340      0.676      1.086      0.277      -0.591       2.058\n",
            "28                          1.6503      0.597      2.763      0.006       0.480       2.821\n",
            "29                          1.5325      0.646      2.371      0.018       0.266       2.799\n",
            "30                          2.3826      0.695      3.426      0.001       1.020       3.746\n",
            "31                          0.9163      0.688      1.332      0.183      -0.432       2.265\n",
            "32                          2.9676      0.782      3.795      0.000       1.435       4.500\n",
            "33                          2.2744      0.826      2.752      0.006       0.655       3.894\n",
            "34                          1.2448      0.757      1.644      0.100      -0.239       2.729\n",
            "35                          2.2380      0.754      2.970      0.003       0.761       3.715\n",
            "36                          1.6503      0.810      2.036      0.042       0.062       3.239\n",
            "37                          1.6503      0.810      2.036      0.042       0.062       3.239\n",
            "38                          1.4271      0.935      1.527      0.127      -0.405       3.259\n",
            "39                          1.4271      1.485      0.961      0.337      -1.484       4.339\n",
            "40                         20.0255   6310.013      0.003      0.997   -1.23e+04    1.24e+04\n",
            "41                         34.0854   6.22e+06   5.48e-06      1.000   -1.22e+07    1.22e+07\n",
            "42                         20.0256   6310.125      0.003      0.997   -1.23e+04    1.24e+04\n",
            "43                          2.1203      1.306      1.623      0.105      -0.440       4.681\n",
            "44                         46.5130   1.45e+08    3.2e-07      1.000   -2.85e+08    2.85e+08\n",
            "45                          2.1203      1.306      1.623      0.105      -0.440       4.681\n",
            "46                         20.5905   1.03e+04      0.002      0.998   -2.01e+04    2.01e+04\n",
            "47                          1.4271      1.098      1.299      0.194      -0.726       3.580\n",
            "48                         14.4095    380.656      0.038      0.970    -731.663     760.482\n",
            "49                         21.2152   8860.052      0.002      0.998   -1.73e+04    1.74e+04\n",
            "51                         34.0854   6.16e+06   5.53e-06      1.000   -1.21e+07    1.21e+07\n",
            "52                         20.5906   1.03e+04      0.002      0.998   -2.01e+04    2.01e+04\n",
            "53                          1.4271      1.485      0.961      0.337      -1.484       4.339\n",
            "54                         46.5130   1.46e+08   3.19e-07      1.000   -2.85e+08    2.85e+08\n",
            "55                          3.0366      1.186      2.560      0.010       0.712       5.361\n",
            "56                         20.5909   1.03e+04      0.002      0.998   -2.01e+04    2.01e+04\n",
            "57                         14.4095    380.656      0.038      0.970    -731.663     760.482\n",
            "58                          2.8134      1.207      2.331      0.020       0.448       5.179\n",
            "59                         46.5130   1.46e+08   3.18e-07      1.000   -2.86e+08    2.86e+08\n",
            "60                         12.7874    207.183      0.062      0.951    -393.284     418.859\n",
            "61                         46.5130   1.46e+08   3.19e-07      1.000   -2.85e+08    2.85e+08\n",
            "62                         20.0255   6309.910      0.003      0.997   -1.23e+04    1.24e+04\n",
            "63                         20.5907   1.03e+04      0.002      0.998   -2.01e+04    2.01e+04\n",
            "64                         23.1069   2.55e+04      0.001      0.999      -5e+04       5e+04\n",
            "65                         46.5130   1.46e+08   3.19e-07      1.000   -2.85e+08    2.85e+08\n",
            "-------------------------------------------------------------------------------------------\n",
            "Segment_Label_Encoded=2       coef    std err          z      P>|z|      [0.025      0.975]\n",
            "-------------------------------------------------------------------------------------------\n",
            "const                     1.17e-09      0.283   4.14e-09      1.000      -0.554       0.554\n",
            "19                         -0.1699      0.385     -0.441      0.659      -0.925       0.585\n",
            "20                          0.2985      0.395      0.756      0.449      -0.475       1.072\n",
            "21                          0.3185      0.434      0.735      0.463      -0.531       1.168\n",
            "22                         -0.1892      0.395     -0.479      0.632      -0.964       0.585\n",
            "23                         -0.2136      0.408     -0.524      0.600      -1.012       0.585\n",
            "24                          0.1252      0.453      0.276      0.782      -0.763       1.014\n",
            "25                         -0.4796      0.452     -1.060      0.289      -1.366       0.407\n",
            "26                         -0.0741      0.478     -0.155      0.877      -1.011       0.862\n",
            "27                         -0.1823      0.513     -0.355      0.722      -1.188       0.823\n",
            "28                         -0.5390      0.553     -0.974      0.330      -1.624       0.546\n",
            "29                          0.3677      0.518      0.710      0.478      -0.647       1.382\n",
            "30                          0.1823      0.668      0.273      0.785      -1.128       1.492\n",
            "31                       -1.17e-09      0.529  -2.21e-09      1.000      -1.037       1.037\n",
            "32                          0.8473      0.746      1.136      0.256      -0.614       2.309\n",
            "33                          0.6931      0.762      0.910      0.363      -0.800       2.186\n",
            "34                         -1.7918      1.117     -1.605      0.109      -3.980       0.397\n",
            "35                          0.5596      0.688      0.814      0.416      -0.788       1.907\n",
            "36                       -1.17e-09      0.762  -1.54e-09      1.000      -1.493       1.493\n",
            "37                         -0.6931      0.911     -0.761      0.447      -2.479       1.092\n",
            "38                         -0.4055      0.956     -0.424      0.671      -2.279       1.468\n",
            "39                          0.6931      1.257      0.551      0.581      -1.770       3.157\n",
            "40                         17.4998   6310.013      0.003      0.998   -1.23e+04    1.24e+04\n",
            "41                         31.2720   6.22e+06   5.03e-06      1.000   -1.22e+07    1.22e+07\n",
            "42                         17.4998   6310.125      0.003      0.998   -1.24e+04    1.24e+04\n",
            "43                       -1.17e-09      1.442  -8.12e-10      1.000      -2.827       2.827\n",
            "44                         19.5470   1.45e+08   1.34e-07      1.000   -2.85e+08    2.85e+08\n",
            "45                       -1.17e-09      1.442  -8.12e-10      1.000      -2.827       2.827\n",
            "46                         -0.9173   1.92e+04  -4.78e-05      1.000   -3.76e+04    3.76e+04\n",
            "47                         -0.6931      1.257     -0.551      0.581      -3.157       1.770\n",
            "48                         -0.3920    599.445     -0.001      0.999   -1175.282    1174.499\n",
            "49                         -1.7832   2.34e+04  -7.63e-05      1.000   -4.58e+04    4.58e+04\n",
            "51                         31.2720   6.16e+06   5.08e-06      1.000   -1.21e+07    1.21e+07\n",
            "52                         -0.9173   1.92e+04  -4.78e-05      1.000   -3.76e+04    3.76e+04\n",
            "53                        -20.6329   3.02e+04     -0.001      0.999   -5.93e+04    5.92e+04\n",
            "54                         19.5470   1.46e+08   1.34e-07      1.000   -2.85e+08    2.85e+08\n",
            "55                       -1.17e-09      1.442  -8.12e-10      1.000      -2.827       2.827\n",
            "56                         -0.9177   1.92e+04  -4.78e-05      1.000   -3.76e+04    3.76e+04\n",
            "57                         -0.3920    599.445     -0.001      0.999   -1175.283    1174.499\n",
            "58                        -20.9763   3.59e+04     -0.001      1.000   -7.04e+04    7.03e+04\n",
            "59                         19.5470   1.46e+08   1.34e-07      1.000   -2.86e+08    2.86e+08\n",
            "60                         10.6672    207.184      0.051      0.959    -395.406     416.741\n",
            "61                         19.5470   1.46e+08   1.34e-07      1.000   -2.85e+08    2.85e+08\n",
            "62                         17.4998   6309.910      0.003      0.998   -1.23e+04    1.24e+04\n",
            "63                         -0.9175   1.92e+04  -4.78e-05      1.000   -3.76e+04    3.76e+04\n",
            "64                         -2.3339   8.58e+04  -2.72e-05      1.000   -1.68e+05    1.68e+05\n",
            "65                         19.5470   1.46e+08   1.34e-07      1.000   -2.85e+08    2.85e+08\n",
            "===========================================================================================\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.10/dist-packages/statsmodels/base/model.py:607: ConvergenceWarning: Maximum Likelihood optimization failed to converge. Check mle_retvals\n",
            "  warnings.warn(\"Maximum Likelihood optimization failed to \"\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Filter the DataFrame for 'Warrior Guild' game\n",
        "wg_data = Athena[Athena['gg.game.presented'] == 'Warrior Guild']\n",
        "\n",
        "Warrior_Guild = pd.get_dummies(wg_data, columns=[\"Segment_Label\"], drop_first = True, prefix_sep = \"_\", dtype = int)"
      ],
      "metadata": {
        "id": "NpMlQmeS8R3w"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "Warrior_Guild"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 513
        },
        "id": "vC9sSLZI83Ix",
        "outputId": "fe748a28-0030-4e1d-c582-270ecb55cc9e"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "     gender state  age  income  imp.challenge  imp.unlocks  imp.customize  \\\n",
              "0    female    AZ   24   54000              5            6              7   \n",
              "1      male    FL   18   12000              4            2              5   \n",
              "2      male    IL   23   41000              7            5              2   \n",
              "3      male    CA   21   61000              4            3              4   \n",
              "6    female    CA   51   82000              4            4              7   \n",
              "..      ...   ...  ...     ...            ...          ...            ...   \n",
              "808  female    WY   36   60000              6            6              6   \n",
              "811    male    MA   31   88000              4            6              5   \n",
              "812  female    OR   36  134000              4            3              2   \n",
              "815    male    FL   33   31000              6            3              3   \n",
              "818    male    TN   19    6000              4            7              6   \n",
              "\n",
              "     imp.difficulty  imp.characters  imp.storyline  ...  Effortless  \\\n",
              "0                 4               6              5  ...    0.463469   \n",
              "1                 3               4              6  ...    0.380209   \n",
              "2                 5               3              4  ...    0.321241   \n",
              "3                 6               1              2  ...   -1.066510   \n",
              "6                 5               6              6  ...   -0.483305   \n",
              "..              ...             ...            ...  ...         ...   \n",
              "808               5               4              7  ...   -0.942978   \n",
              "811               6               7              7  ...    1.083983   \n",
              "812               3               5              6  ...   -0.907369   \n",
              "815               7               1              1  ...    0.026948   \n",
              "818               4               3              4  ...   -1.265297   \n",
              "\n",
              "     Daredevil  Achievement Hunter  Calm Commander  Cluster  location  \\\n",
              "0    -1.037442            0.732058        0.607057        0      West   \n",
              "1    -0.186650           -0.667546        2.071920        0      East   \n",
              "2     1.031774            0.282634       -0.299090        1    Middle   \n",
              "3     0.018140           -1.089635       -0.670698        0      West   \n",
              "6    -1.490428           -0.530868        1.470580        1      West   \n",
              "..         ...                 ...             ...      ...       ...   \n",
              "808  -0.582466           -0.171980        1.012097        1      West   \n",
              "811  -1.092998           -1.114540       -0.061804        1      East   \n",
              "812   0.176984           -0.585312        0.561704        0      West   \n",
              "815   0.131883           -1.273035        1.025076        0      East   \n",
              "818  -1.261683            1.737099        0.307961        1    Middle   \n",
              "\n",
              "       Age_Group   Income_Group  Segment_Label_Party Cows  \\\n",
              "0          Young  Middle Income                         0   \n",
              "1          Young     Low Income                         0   \n",
              "2          Young     Low Income                         0   \n",
              "3          Young  Middle Income                         0   \n",
              "6    Middle-aged  Middle Income                         0   \n",
              "..           ...            ...                       ...   \n",
              "808  Middle-aged  Middle Income                         0   \n",
              "811        Young  Middle Income                         0   \n",
              "812  Middle-aged    High Income                         0   \n",
              "815        Young     Low Income                         0   \n",
              "818        Young     Low Income                         0   \n",
              "\n",
              "     Segment_Label_Solitary Navigators  \n",
              "0                                    0  \n",
              "1                                    0  \n",
              "2                                    1  \n",
              "3                                    0  \n",
              "6                                    1  \n",
              "..                                 ...  \n",
              "808                                  1  \n",
              "811                                  1  \n",
              "812                                  0  \n",
              "815                                  0  \n",
              "818                                  1  \n",
              "\n",
              "[274 rows x 67 columns]"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-a284630a-6b89-475f-a4c5-0ac6e20bcc1a\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>gender</th>\n",
              "      <th>state</th>\n",
              "      <th>age</th>\n",
              "      <th>income</th>\n",
              "      <th>imp.challenge</th>\n",
              "      <th>imp.unlocks</th>\n",
              "      <th>imp.customize</th>\n",
              "      <th>imp.difficulty</th>\n",
              "      <th>imp.characters</th>\n",
              "      <th>imp.storyline</th>\n",
              "      <th>...</th>\n",
              "      <th>Effortless</th>\n",
              "      <th>Daredevil</th>\n",
              "      <th>Achievement Hunter</th>\n",
              "      <th>Calm Commander</th>\n",
              "      <th>Cluster</th>\n",
              "      <th>location</th>\n",
              "      <th>Age_Group</th>\n",
              "      <th>Income_Group</th>\n",
              "      <th>Segment_Label_Party Cows</th>\n",
              "      <th>Segment_Label_Solitary Navigators</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>female</td>\n",
              "      <td>AZ</td>\n",
              "      <td>24</td>\n",
              "      <td>54000</td>\n",
              "      <td>5</td>\n",
              "      <td>6</td>\n",
              "      <td>7</td>\n",
              "      <td>4</td>\n",
              "      <td>6</td>\n",
              "      <td>5</td>\n",
              "      <td>...</td>\n",
              "      <td>0.463469</td>\n",
              "      <td>-1.037442</td>\n",
              "      <td>0.732058</td>\n",
              "      <td>0.607057</td>\n",
              "      <td>0</td>\n",
              "      <td>West</td>\n",
              "      <td>Young</td>\n",
              "      <td>Middle Income</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>male</td>\n",
              "      <td>FL</td>\n",
              "      <td>18</td>\n",
              "      <td>12000</td>\n",
              "      <td>4</td>\n",
              "      <td>2</td>\n",
              "      <td>5</td>\n",
              "      <td>3</td>\n",
              "      <td>4</td>\n",
              "      <td>6</td>\n",
              "      <td>...</td>\n",
              "      <td>0.380209</td>\n",
              "      <td>-0.186650</td>\n",
              "      <td>-0.667546</td>\n",
              "      <td>2.071920</td>\n",
              "      <td>0</td>\n",
              "      <td>East</td>\n",
              "      <td>Young</td>\n",
              "      <td>Low Income</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>male</td>\n",
              "      <td>IL</td>\n",
              "      <td>23</td>\n",
              "      <td>41000</td>\n",
              "      <td>7</td>\n",
              "      <td>5</td>\n",
              "      <td>2</td>\n",
              "      <td>5</td>\n",
              "      <td>3</td>\n",
              "      <td>4</td>\n",
              "      <td>...</td>\n",
              "      <td>0.321241</td>\n",
              "      <td>1.031774</td>\n",
              "      <td>0.282634</td>\n",
              "      <td>-0.299090</td>\n",
              "      <td>1</td>\n",
              "      <td>Middle</td>\n",
              "      <td>Young</td>\n",
              "      <td>Low Income</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>male</td>\n",
              "      <td>CA</td>\n",
              "      <td>21</td>\n",
              "      <td>61000</td>\n",
              "      <td>4</td>\n",
              "      <td>3</td>\n",
              "      <td>4</td>\n",
              "      <td>6</td>\n",
              "      <td>1</td>\n",
              "      <td>2</td>\n",
              "      <td>...</td>\n",
              "      <td>-1.066510</td>\n",
              "      <td>0.018140</td>\n",
              "      <td>-1.089635</td>\n",
              "      <td>-0.670698</td>\n",
              "      <td>0</td>\n",
              "      <td>West</td>\n",
              "      <td>Young</td>\n",
              "      <td>Middle Income</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>6</th>\n",
              "      <td>female</td>\n",
              "      <td>CA</td>\n",
              "      <td>51</td>\n",
              "      <td>82000</td>\n",
              "      <td>4</td>\n",
              "      <td>4</td>\n",
              "      <td>7</td>\n",
              "      <td>5</td>\n",
              "      <td>6</td>\n",
              "      <td>6</td>\n",
              "      <td>...</td>\n",
              "      <td>-0.483305</td>\n",
              "      <td>-1.490428</td>\n",
              "      <td>-0.530868</td>\n",
              "      <td>1.470580</td>\n",
              "      <td>1</td>\n",
              "      <td>West</td>\n",
              "      <td>Middle-aged</td>\n",
              "      <td>Middle Income</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>808</th>\n",
              "      <td>female</td>\n",
              "      <td>WY</td>\n",
              "      <td>36</td>\n",
              "      <td>60000</td>\n",
              "      <td>6</td>\n",
              "      <td>6</td>\n",
              "      <td>6</td>\n",
              "      <td>5</td>\n",
              "      <td>4</td>\n",
              "      <td>7</td>\n",
              "      <td>...</td>\n",
              "      <td>-0.942978</td>\n",
              "      <td>-0.582466</td>\n",
              "      <td>-0.171980</td>\n",
              "      <td>1.012097</td>\n",
              "      <td>1</td>\n",
              "      <td>West</td>\n",
              "      <td>Middle-aged</td>\n",
              "      <td>Middle Income</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>811</th>\n",
              "      <td>male</td>\n",
              "      <td>MA</td>\n",
              "      <td>31</td>\n",
              "      <td>88000</td>\n",
              "      <td>4</td>\n",
              "      <td>6</td>\n",
              "      <td>5</td>\n",
              "      <td>6</td>\n",
              "      <td>7</td>\n",
              "      <td>7</td>\n",
              "      <td>...</td>\n",
              "      <td>1.083983</td>\n",
              "      <td>-1.092998</td>\n",
              "      <td>-1.114540</td>\n",
              "      <td>-0.061804</td>\n",
              "      <td>1</td>\n",
              "      <td>East</td>\n",
              "      <td>Young</td>\n",
              "      <td>Middle Income</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>812</th>\n",
              "      <td>female</td>\n",
              "      <td>OR</td>\n",
              "      <td>36</td>\n",
              "      <td>134000</td>\n",
              "      <td>4</td>\n",
              "      <td>3</td>\n",
              "      <td>2</td>\n",
              "      <td>3</td>\n",
              "      <td>5</td>\n",
              "      <td>6</td>\n",
              "      <td>...</td>\n",
              "      <td>-0.907369</td>\n",
              "      <td>0.176984</td>\n",
              "      <td>-0.585312</td>\n",
              "      <td>0.561704</td>\n",
              "      <td>0</td>\n",
              "      <td>West</td>\n",
              "      <td>Middle-aged</td>\n",
              "      <td>High Income</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>815</th>\n",
              "      <td>male</td>\n",
              "      <td>FL</td>\n",
              "      <td>33</td>\n",
              "      <td>31000</td>\n",
              "      <td>6</td>\n",
              "      <td>3</td>\n",
              "      <td>3</td>\n",
              "      <td>7</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>...</td>\n",
              "      <td>0.026948</td>\n",
              "      <td>0.131883</td>\n",
              "      <td>-1.273035</td>\n",
              "      <td>1.025076</td>\n",
              "      <td>0</td>\n",
              "      <td>East</td>\n",
              "      <td>Young</td>\n",
              "      <td>Low Income</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>818</th>\n",
              "      <td>male</td>\n",
              "      <td>TN</td>\n",
              "      <td>19</td>\n",
              "      <td>6000</td>\n",
              "      <td>4</td>\n",
              "      <td>7</td>\n",
              "      <td>6</td>\n",
              "      <td>4</td>\n",
              "      <td>3</td>\n",
              "      <td>4</td>\n",
              "      <td>...</td>\n",
              "      <td>-1.265297</td>\n",
              "      <td>-1.261683</td>\n",
              "      <td>1.737099</td>\n",
              "      <td>0.307961</td>\n",
              "      <td>1</td>\n",
              "      <td>Middle</td>\n",
              "      <td>Young</td>\n",
              "      <td>Low Income</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>274 rows × 67 columns</p>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-a284630a-6b89-475f-a4c5-0ac6e20bcc1a')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-a284630a-6b89-475f-a4c5-0ac6e20bcc1a button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-a284630a-6b89-475f-a4c5-0ac6e20bcc1a');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-8386da79-f66a-49f7-8bf9-e86101168a72\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-8386da79-f66a-49f7-8bf9-e86101168a72')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-8386da79-f66a-49f7-8bf9-e86101168a72 button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "  <div id=\"id_54ecda1a-83f4-4b2f-a407-28499780d0db\">\n",
              "    <style>\n",
              "      .colab-df-generate {\n",
              "        background-color: #E8F0FE;\n",
              "        border: none;\n",
              "        border-radius: 50%;\n",
              "        cursor: pointer;\n",
              "        display: none;\n",
              "        fill: #1967D2;\n",
              "        height: 32px;\n",
              "        padding: 0 0 0 0;\n",
              "        width: 32px;\n",
              "      }\n",
              "\n",
              "      .colab-df-generate:hover {\n",
              "        background-color: #E2EBFA;\n",
              "        box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "        fill: #174EA6;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate {\n",
              "        background-color: #3B4455;\n",
              "        fill: #D2E3FC;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate:hover {\n",
              "        background-color: #434B5C;\n",
              "        box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "        filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "        fill: #FFFFFF;\n",
              "      }\n",
              "    </style>\n",
              "    <button class=\"colab-df-generate\" onclick=\"generateWithVariable('Warrior_Guild')\"\n",
              "            title=\"Generate code using this dataframe.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M7,19H8.4L18.45,9,17,7.55,7,17.6ZM5,21V16.75L18.45,3.32a2,2,0,0,1,2.83,0l1.4,1.43a1.91,1.91,0,0,1,.58,1.4,1.91,1.91,0,0,1-.58,1.4L9.25,21ZM18.45,9,17,7.55Zm-12,3A5.31,5.31,0,0,0,4.9,8.1,5.31,5.31,0,0,0,1,6.5,5.31,5.31,0,0,0,4.9,4.9,5.31,5.31,0,0,0,6.5,1,5.31,5.31,0,0,0,8.1,4.9,5.31,5.31,0,0,0,12,6.5,5.46,5.46,0,0,0,6.5,12Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "    <script>\n",
              "      (() => {\n",
              "      const buttonEl =\n",
              "        document.querySelector('#id_54ecda1a-83f4-4b2f-a407-28499780d0db button.colab-df-generate');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      buttonEl.onclick = () => {\n",
              "        google.colab.notebook.generateWithVariable('Warrior_Guild');\n",
              "      }\n",
              "      })();\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ]
          },
          "metadata": {},
          "execution_count": 21
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import statsmodels.api as sm\n",
        "\n",
        "X = Warrior_Guild[['Segment_Label_Party Cows', 'Segment_Label_Solitary Navigators']]\n",
        "y = Warrior_Guild['gg.maxprice']  # The dependent variable\n",
        "\n",
        "# Add a constant to the model (the intercept)\n",
        "X = sm.add_constant(X)\n",
        "\n",
        "# Fit the regression model\n",
        "model = sm.OLS(y, X).fit()\n",
        "\n",
        "# Print out the statistics\n",
        "print(model.summary())\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "tkuQ0hiq7XLi",
        "outputId": "49c9c7d8-c3af-466f-8afe-ed2fde491944"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "                            OLS Regression Results                            \n",
            "==============================================================================\n",
            "Dep. Variable:            gg.maxprice   R-squared:                       0.020\n",
            "Model:                            OLS   Adj. R-squared:                  0.013\n",
            "Method:                 Least Squares   F-statistic:                     2.766\n",
            "Date:                Sat, 16 Dec 2023   Prob (F-statistic):             0.0647\n",
            "Time:                        22:22:35   Log-Likelihood:                -1136.6\n",
            "No. Observations:                 274   AIC:                             2279.\n",
            "Df Residuals:                     271   BIC:                             2290.\n",
            "Df Model:                           2                                         \n",
            "Covariance Type:            nonrobust                                         \n",
            "=====================================================================================================\n",
            "                                        coef    std err          t      P>|t|      [0.025      0.975]\n",
            "-----------------------------------------------------------------------------------------------------\n",
            "const                                46.1386      1.533     30.097      0.000      43.120      49.157\n",
            "Segment_Label_Party Cows             -2.7857      2.268     -1.228      0.220      -7.250       1.679\n",
            "Segment_Label_Solitary Navigators     2.7250      2.247      1.213      0.226      -1.698       7.148\n",
            "==============================================================================\n",
            "Omnibus:                       34.278   Durbin-Watson:                   1.823\n",
            "Prob(Omnibus):                  0.000   Jarque-Bera (JB):               43.469\n",
            "Skew:                           0.897   Prob(JB):                     3.64e-10\n",
            "Kurtosis:                       3.768   Cond. No.                         3.58\n",
            "==============================================================================\n",
            "\n",
            "Notes:\n",
            "[1] Standard Errors assume that the covariance matrix of the errors is correctly specified.\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "Evercrest_data = Athena[Athena['gg.game.presented'] == 'Evercrest']\n",
        "\n",
        "Evercrest_OLS = pd.get_dummies(Evercrest_data, columns=[\"Segment_Label\"], drop_first = True, prefix_sep = \"_\", dtype = int)\n",
        "X = Evercrest_OLS[['Segment_Label_Party Cows', 'Segment_Label_Solitary Navigators']]\n",
        "y = Evercrest_OLS['gg.maxprice']\n",
        "\n",
        "# Add a constant to the model (the intercept)\n",
        "X = sm.add_constant(X)\n",
        "\n",
        "# Fit the regression model\n",
        "model = sm.OLS(y, X).fit()\n",
        "\n",
        "# Print out the statistics\n",
        "print(model.summary())"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "_WK_s1bs-A5S",
        "outputId": "fda12c3b-fc2c-4d71-c68b-ce66acedd5f4"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "                            OLS Regression Results                            \n",
            "==============================================================================\n",
            "Dep. Variable:            gg.maxprice   R-squared:                       0.018\n",
            "Model:                            OLS   Adj. R-squared:                  0.011\n",
            "Method:                 Least Squares   F-statistic:                     2.516\n",
            "Date:                Sat, 16 Dec 2023   Prob (F-statistic):             0.0827\n",
            "Time:                        22:22:35   Log-Likelihood:                -1185.1\n",
            "No. Observations:                 276   AIC:                             2376.\n",
            "Df Residuals:                     273   BIC:                             2387.\n",
            "Df Model:                           2                                         \n",
            "Covariance Type:            nonrobust                                         \n",
            "=====================================================================================================\n",
            "                                        coef    std err          t      P>|t|      [0.025      0.975]\n",
            "-----------------------------------------------------------------------------------------------------\n",
            "const                                44.9444      1.878     23.926      0.000      41.246      48.643\n",
            "Segment_Label_Party Cows             -1.4352      2.543     -0.564      0.573      -6.442       3.572\n",
            "Segment_Label_Solitary Navigators     4.3889      2.757      1.592      0.113      -1.038       9.816\n",
            "==============================================================================\n",
            "Omnibus:                       20.245   Durbin-Watson:                   2.217\n",
            "Prob(Omnibus):                  0.000   Jarque-Bera (JB):               22.980\n",
            "Skew:                           0.705   Prob(JB):                     1.02e-05\n",
            "Kurtosis:                       3.100   Cond. No.                         3.80\n",
            "==============================================================================\n",
            "\n",
            "Notes:\n",
            "[1] Standard Errors assume that the covariance matrix of the errors is correctly specified.\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "SG_data = Athena[Athena['gg.game.presented'] == 'Seraph Guardians']\n",
        "\n",
        "SG_OLS = pd.get_dummies(SG_data, columns=[\"Segment_Label\"], drop_first = True, prefix_sep = \"_\", dtype = int)\n",
        "X = SG_OLS[['Segment_Label_Party Cows', 'Segment_Label_Solitary Navigators']]\n",
        "y = SG_OLS['gg.maxprice']\n",
        "\n",
        "# Add a constant to the model (the intercept)\n",
        "X = sm.add_constant(X)\n",
        "\n",
        "# Fit the regression model\n",
        "model = sm.OLS(y, X).fit()\n",
        "\n",
        "# Print out the statistics\n",
        "print(model.summary())"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "eUNQjIbb-Usf",
        "outputId": "f17f6f19-eea3-4318-8c9d-66406da72915"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "                            OLS Regression Results                            \n",
            "==============================================================================\n",
            "Dep. Variable:            gg.maxprice   R-squared:                       0.077\n",
            "Model:                            OLS   Adj. R-squared:                  0.070\n",
            "Method:                 Least Squares   F-statistic:                     11.37\n",
            "Date:                Sat, 16 Dec 2023   Prob (F-statistic):           1.80e-05\n",
            "Time:                        22:22:35   Log-Likelihood:                -1176.1\n",
            "No. Observations:                 277   AIC:                             2358.\n",
            "Df Residuals:                     274   BIC:                             2369.\n",
            "Df Model:                           2                                         \n",
            "Covariance Type:            nonrobust                                         \n",
            "=====================================================================================================\n",
            "                                        coef    std err          t      P>|t|      [0.025      0.975]\n",
            "-----------------------------------------------------------------------------------------------------\n",
            "const                                48.0645      1.762     27.286      0.000      44.597      51.532\n",
            "Segment_Label_Party Cows             -1.2714      2.534     -0.502      0.616      -6.260       3.717\n",
            "Segment_Label_Solitary Navigators     9.5334      2.465      3.867      0.000       4.680      14.387\n",
            "==============================================================================\n",
            "Omnibus:                       11.595   Durbin-Watson:                   2.086\n",
            "Prob(Omnibus):                  0.003   Jarque-Bera (JB):               12.365\n",
            "Skew:                           0.516   Prob(JB):                      0.00206\n",
            "Kurtosis:                       2.918   Cond. No.                         3.72\n",
            "==============================================================================\n",
            "\n",
            "Notes:\n",
            "[1] Standard Errors assume that the covariance matrix of the errors is correctly specified.\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#Question 5a\n",
        "# Constants\n",
        "fixed_costs = 7_000_000  # Fixed costs for any game\n",
        "royalty_rate = 0.05  # 5% royalty rate\n",
        "valve_share_initial = 0.30  # Valve's share up to $10 million\n",
        "valve_share_mid = 0.25  # Valve's share between $10 million and $50 million\n",
        "valve_share_final = 0.20  # Valve's share after $50 million\n",
        "total_steam_customers = 10_000_000  # Total active Steam customers interested\n",
        "purchase_probability = 0.30  # 30% of respondents actually purchasing\n",
        "\n",
        "# Development costs for each game\n",
        "dev_costs = {\n",
        "    'Warrior Guild': 5_000_000,\n",
        "    'Evercrest': 6_000_000,\n",
        "    'Seraph Guardians': 5_500_000\n",
        "}\n",
        "\n",
        "# Ideal prices for each game\n",
        "ideal_prices = {\n",
        "    'Warrior Guild': 32,\n",
        "    'Evercrest': 32,\n",
        "    'Seraph Guardians': 35\n",
        "}\n",
        "\n",
        "# Function to calculate net revenue\n",
        "def calculate_net_revenue(game, price, dev_cost):\n",
        "    # Expected Sales Volume\n",
        "    expected_sales = total_steam_customers * purchase_probability\n",
        "\n",
        "    # Gross Revenue\n",
        "    gross_revenue = expected_sales * price\n",
        "\n",
        "    # Costs (Fixed, Development, Royalties)\n",
        "    total_costs = fixed_costs + dev_cost + (gross_revenue * royalty_rate)\n",
        "\n",
        "    # Valve's Share Calculation\n",
        "    valve_share = 0\n",
        "    if gross_revenue <= 10_000_000:\n",
        "        valve_share += gross_revenue * valve_share_initial\n",
        "    elif gross_revenue <= 50_000_000:\n",
        "        valve_share += 10_000_000 * valve_share_initial\n",
        "        valve_share += (gross_revenue - 10_000_000) * valve_share_mid\n",
        "    else:\n",
        "        valve_share += 10_000_000 * valve_share_initial\n",
        "        valve_share += 40_000_000 * valve_share_mid\n",
        "        valve_share += (gross_revenue - 50_000_000) * valve_share_final\n",
        "\n",
        "    # Net Revenue\n",
        "    net_revenue = gross_revenue - total_costs - valve_share\n",
        "    return net_revenue, gross_revenue\n",
        "\n",
        "# Calculate net revenue for each game\n",
        "net_revenues = {game: calculate_net_revenue(game, ideal_prices[game], dev_costs[game]) for game in ideal_prices}\n",
        "net_revenues"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "zW0ihv4NAPL8",
        "outputId": "d5beb768-b459-421d-dcee-d27f18e6cdfa"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "{'Warrior Guild': (57000000.0, 96000000.0),\n",
              " 'Evercrest': (56000000.0, 96000000.0),\n",
              " 'Seraph Guardians': (63250000.0, 105000000.0)}"
            ]
          },
          "metadata": {},
          "execution_count": 25
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Constants\n",
        "fixed_costs = 7_000_000  # Fixed costs for any game\n",
        "royalty_rate = 0.05  # 5% royalty rate\n",
        "valve_share_initial = 0.30  # Valve's share up to $10 million\n",
        "valve_share_mid = 0.25  # Valve's share between $10 million and $50 million\n",
        "valve_share_final = 0.20  # Valve's share after $50 million\n",
        "total_steam_customers = 10_000_000  # Total active Steam customers interested\n",
        "purchase_probability = 0.30  # 30% of respondents actually purchasing\n",
        "\n",
        "# Development costs for each game\n",
        "dev_costs = {\n",
        "    'Warrior Guild': 5_000_000,\n",
        "    'Evercrest': 6_000_000,\n",
        "    'Seraph Guardians': 5_500_000\n",
        "}\n",
        "\n",
        "# Ideal prices for each game\n",
        "ideal_prices = {\n",
        "    'Warrior Guild': 33,\n",
        "    'Evercrest': 30,\n",
        "    'Seraph Guardians': 36\n",
        "}\n",
        "\n",
        "# Function to calculate net revenue\n",
        "def calculate_net_revenue(game, price, dev_cost):\n",
        "    # Expected Sales Volume\n",
        "    expected_sales = total_steam_customers * purchase_probability\n",
        "\n",
        "    # Gross Revenue\n",
        "    gross_revenue = expected_sales * price\n",
        "\n",
        "    # Costs (Fixed, Development, Royalties)\n",
        "    total_costs = fixed_costs + dev_cost + (gross_revenue * royalty_rate)\n",
        "\n",
        "    # Valve's Share Calculation\n",
        "    valve_share = 0\n",
        "    if gross_revenue <= 10_000_000:\n",
        "        valve_share += gross_revenue * valve_share_initial\n",
        "    elif gross_revenue <= 50_000_000:\n",
        "        valve_share += 10_000_000 * valve_share_initial\n",
        "        valve_share += (gross_revenue - 10_000_000) * valve_share_mid\n",
        "    else:\n",
        "        valve_share += 10_000_000 * valve_share_initial\n",
        "        valve_share += 40_000_000 * valve_share_mid\n",
        "        valve_share += (gross_revenue - 50_000_000) * valve_share_final\n",
        "\n",
        "    # Net Revenue\n",
        "    net_revenue = gross_revenue - total_costs - valve_share\n",
        "    return net_revenue\n",
        "\n",
        "# Calculate net revenue for each game\n",
        "net_revenues = {game: calculate_net_revenue(game, ideal_prices[game], dev_costs[game]) for game in ideal_prices}\n",
        "net_revenues\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "x2RKidmYASTJ",
        "outputId": "97c8853c-0374-407a-c919-bdca9d227c1c"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "{'Warrior Guild': 59250000.0,\n",
              " 'Evercrest': 51500000.0,\n",
              " 'Seraph Guardians': 65500000.0}"
            ]
          },
          "metadata": {},
          "execution_count": 26
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#Question 5b\n",
        "import pandas as pd\n",
        "\n",
        "survey_data = pd.read_excel('Ranking.xlsx')\n"
      ],
      "metadata": {
        "id": "NjkexHl0FvsS"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "market_share = survey_data.apply(lambda x: (x == 1).sum() / len(survey_data))\n",
        "market_share_percentage = market_share * 100\n"
      ],
      "metadata": {
        "id": "VQ3L_rYiF1xF"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "market_share_percentage"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "ichDg8mgF3Su",
        "outputId": "14f9398a-62a4-424c-8a3f-ac5c061faa24"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "rank.WarriorGuild       11.970979\n",
              "rank.SeraphGuardians    53.808948\n",
              "rank.Evercrest          10.157195\n",
              "rank.DevilsGate         16.203144\n",
              "rank.Marksman            1.451028\n",
              "rank.QuestoftheTitan     6.408706\n",
              "dtype: float64"
            ]
          },
          "metadata": {},
          "execution_count": 29
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Original market shares\n",
        "market_shares = {\n",
        "    'WarriorGuild': 11.97,\n",
        "    'SeraphGuardians': 53.81,\n",
        "    'Evercrest': 10.16,\n",
        "    'DevilsGate': 16.20,\n",
        "    'Marksman': 1.45,\n",
        "    'QuestoftheTitan': 6.41\n",
        "}\n",
        "\n",
        "# Assumption: Price sensitivity reduction (example: 10% reduction in market share if priced higher)\n",
        "price_sensitivity_reduction = 10\n",
        "\n",
        "# Assumption: Percentage of customers willing to buy a second game (example: 20%)\n",
        "second_game_purchase_rate = 20\n",
        "\n",
        "# Apply price sensitivity\n",
        "for game in ['WarriorGuild', 'SeraphGuardians', 'Evercrest']:\n",
        "    market_shares[game] *= (1 - price_sensitivity_reduction / 100)\n",
        "\n",
        "# Calculate total market share for Athena's games after price sensitivity adjustment\n",
        "athena_market_share = sum(market_shares[game] for game in ['WarriorGuild', 'SeraphGuardians', 'Evercrest'])\n",
        "\n",
        "# Adjust for second game purchase\n",
        "athena_market_share += (athena_market_share * second_game_purchase_rate / 100)\n",
        "\n",
        "athena_market_share\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "F6WCuc8BHWiW",
        "outputId": "f9d88786-4bf3-4e39-8dc9-ce0bba753a63"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "82.01520000000001"
            ]
          },
          "metadata": {},
          "execution_count": 30
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "################################################################\n",
        "Athena = pd.read_csv('Athena_survey_data.csv')"
      ],
      "metadata": {
        "id": "aEv_ima1RHJ8"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "#Checking Question 4 pricing\n",
        "athena_Warrior_Guild = Athena[Athena['gg.game.presented'] == 'Warrior Guild']\n",
        "\n",
        "cumulative_wtp = pd.DataFrame(columns=['price', 'per_customers_wtp', 'pred_revenue'])\n",
        "\n",
        "for price in np.arange(min(athena_Warrior_Guild['gg.maxprice']), max(athena_Warrior_Guild['gg.maxprice']) + 5, 2):\n",
        "    num_respondents_wtp = sum(athena_Warrior_Guild['gg.maxprice'] >= price)\n",
        "    cumulative_wtp = pd.concat([cumulative_wtp, pd.DataFrame({\n",
        "        'price': [price],\n",
        "        'per_customers_wtp': [num_respondents_wtp / len(athena_Warrior_Guild)],\n",
        "        'pred_revenue': [num_respondents_wtp * price]\n",
        "    })], ignore_index=True)\n",
        "cumulative_wtp"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 1000
        },
        "id": "MkzzxjxcWr9T",
        "outputId": "86439c73-3ac4-402d-b213-cde27bafcee3"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "   price  per_customers_wtp pred_revenue\n",
              "0     18           1.000000         4932\n",
              "1     20           0.992701         5440\n",
              "2     22           0.981752         5918\n",
              "3     24           0.970803         6384\n",
              "4     26           0.956204         6812\n",
              "5     28           0.934307         7168\n",
              "6     30           0.890511         7320\n",
              "7     32           0.850365         7456\n",
              "8     34           0.788321         7344\n",
              "9     36           0.726277         7164\n",
              "10    38           0.664234         6916\n",
              "11    40           0.598540         6560\n",
              "12    42           0.554745         6384\n",
              "13    44           0.507299         6116\n",
              "14    46           0.434307         5474\n",
              "15    48           0.405109         5328\n",
              "16    50           0.364964         5000\n",
              "17    52           0.310219         4420\n",
              "18    54           0.255474         3780\n",
              "19    56           0.240876         3696\n",
              "20    58           0.204380         3248\n",
              "21    60           0.182482         3000\n",
              "22    62           0.164234         2790\n",
              "23    64           0.127737         2240\n",
              "24    66           0.102190         1848\n",
              "25    68           0.098540         1836\n",
              "26    70           0.087591         1680\n",
              "27    72           0.080292         1584\n",
              "28    74           0.069343         1406\n",
              "29    76           0.040146          836\n",
              "30    78           0.036496          780\n",
              "31    80           0.036496          800\n",
              "32    82           0.032847          738\n",
              "33    84           0.032847          756\n",
              "34    86           0.018248          430\n",
              "35    88           0.014599          352\n",
              "36    90           0.014599          360\n",
              "37    92           0.014599          368\n",
              "38    94           0.014599          376\n",
              "39    96           0.010949          288\n",
              "40    98           0.003650           98\n",
              "41   100           0.003650          100\n",
              "42   102           0.000000            0\n",
              "43   104           0.000000            0"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-f4f6744f-fb97-49ad-8440-e2f6b0dd2683\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>price</th>\n",
              "      <th>per_customers_wtp</th>\n",
              "      <th>pred_revenue</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>18</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>4932</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>20</td>\n",
              "      <td>0.992701</td>\n",
              "      <td>5440</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>22</td>\n",
              "      <td>0.981752</td>\n",
              "      <td>5918</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>24</td>\n",
              "      <td>0.970803</td>\n",
              "      <td>6384</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>26</td>\n",
              "      <td>0.956204</td>\n",
              "      <td>6812</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>5</th>\n",
              "      <td>28</td>\n",
              "      <td>0.934307</td>\n",
              "      <td>7168</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>6</th>\n",
              "      <td>30</td>\n",
              "      <td>0.890511</td>\n",
              "      <td>7320</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>7</th>\n",
              "      <td>32</td>\n",
              "      <td>0.850365</td>\n",
              "      <td>7456</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>8</th>\n",
              "      <td>34</td>\n",
              "      <td>0.788321</td>\n",
              "      <td>7344</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>9</th>\n",
              "      <td>36</td>\n",
              "      <td>0.726277</td>\n",
              "      <td>7164</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>10</th>\n",
              "      <td>38</td>\n",
              "      <td>0.664234</td>\n",
              "      <td>6916</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>11</th>\n",
              "      <td>40</td>\n",
              "      <td>0.598540</td>\n",
              "      <td>6560</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>12</th>\n",
              "      <td>42</td>\n",
              "      <td>0.554745</td>\n",
              "      <td>6384</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>13</th>\n",
              "      <td>44</td>\n",
              "      <td>0.507299</td>\n",
              "      <td>6116</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>14</th>\n",
              "      <td>46</td>\n",
              "      <td>0.434307</td>\n",
              "      <td>5474</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>15</th>\n",
              "      <td>48</td>\n",
              "      <td>0.405109</td>\n",
              "      <td>5328</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>16</th>\n",
              "      <td>50</td>\n",
              "      <td>0.364964</td>\n",
              "      <td>5000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>17</th>\n",
              "      <td>52</td>\n",
              "      <td>0.310219</td>\n",
              "      <td>4420</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>18</th>\n",
              "      <td>54</td>\n",
              "      <td>0.255474</td>\n",
              "      <td>3780</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>19</th>\n",
              "      <td>56</td>\n",
              "      <td>0.240876</td>\n",
              "      <td>3696</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>20</th>\n",
              "      <td>58</td>\n",
              "      <td>0.204380</td>\n",
              "      <td>3248</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>21</th>\n",
              "      <td>60</td>\n",
              "      <td>0.182482</td>\n",
              "      <td>3000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>22</th>\n",
              "      <td>62</td>\n",
              "      <td>0.164234</td>\n",
              "      <td>2790</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>23</th>\n",
              "      <td>64</td>\n",
              "      <td>0.127737</td>\n",
              "      <td>2240</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>24</th>\n",
              "      <td>66</td>\n",
              "      <td>0.102190</td>\n",
              "      <td>1848</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>25</th>\n",
              "      <td>68</td>\n",
              "      <td>0.098540</td>\n",
              "      <td>1836</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>26</th>\n",
              "      <td>70</td>\n",
              "      <td>0.087591</td>\n",
              "      <td>1680</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>27</th>\n",
              "      <td>72</td>\n",
              "      <td>0.080292</td>\n",
              "      <td>1584</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>28</th>\n",
              "      <td>74</td>\n",
              "      <td>0.069343</td>\n",
              "      <td>1406</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>29</th>\n",
              "      <td>76</td>\n",
              "      <td>0.040146</td>\n",
              "      <td>836</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>30</th>\n",
              "      <td>78</td>\n",
              "      <td>0.036496</td>\n",
              "      <td>780</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>31</th>\n",
              "      <td>80</td>\n",
              "      <td>0.036496</td>\n",
              "      <td>800</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>32</th>\n",
              "      <td>82</td>\n",
              "      <td>0.032847</td>\n",
              "      <td>738</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>33</th>\n",
              "      <td>84</td>\n",
              "      <td>0.032847</td>\n",
              "      <td>756</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>34</th>\n",
              "      <td>86</td>\n",
              "      <td>0.018248</td>\n",
              "      <td>430</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>35</th>\n",
              "      <td>88</td>\n",
              "      <td>0.014599</td>\n",
              "      <td>352</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>36</th>\n",
              "      <td>90</td>\n",
              "      <td>0.014599</td>\n",
              "      <td>360</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>37</th>\n",
              "      <td>92</td>\n",
              "      <td>0.014599</td>\n",
              "      <td>368</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>38</th>\n",
              "      <td>94</td>\n",
              "      <td>0.014599</td>\n",
              "      <td>376</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>39</th>\n",
              "      <td>96</td>\n",
              "      <td>0.010949</td>\n",
              "      <td>288</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>40</th>\n",
              "      <td>98</td>\n",
              "      <td>0.003650</td>\n",
              "      <td>98</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>41</th>\n",
              "      <td>100</td>\n",
              "      <td>0.003650</td>\n",
              "      <td>100</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>42</th>\n",
              "      <td>102</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>43</th>\n",
              "      <td>104</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-f4f6744f-fb97-49ad-8440-e2f6b0dd2683')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-f4f6744f-fb97-49ad-8440-e2f6b0dd2683 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-f4f6744f-fb97-49ad-8440-e2f6b0dd2683');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-248f63e8-609e-4a6e-8440-cf7c2a0918fe\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-248f63e8-609e-4a6e-8440-cf7c2a0918fe')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-248f63e8-609e-4a6e-8440-cf7c2a0918fe button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "  <div id=\"id_7b827bf2-a62f-4386-8bd8-427d7fa44525\">\n",
              "    <style>\n",
              "      .colab-df-generate {\n",
              "        background-color: #E8F0FE;\n",
              "        border: none;\n",
              "        border-radius: 50%;\n",
              "        cursor: pointer;\n",
              "        display: none;\n",
              "        fill: #1967D2;\n",
              "        height: 32px;\n",
              "        padding: 0 0 0 0;\n",
              "        width: 32px;\n",
              "      }\n",
              "\n",
              "      .colab-df-generate:hover {\n",
              "        background-color: #E2EBFA;\n",
              "        box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "        fill: #174EA6;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate {\n",
              "        background-color: #3B4455;\n",
              "        fill: #D2E3FC;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate:hover {\n",
              "        background-color: #434B5C;\n",
              "        box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "        filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "        fill: #FFFFFF;\n",
              "      }\n",
              "    </style>\n",
              "    <button class=\"colab-df-generate\" onclick=\"generateWithVariable('cumulative_wtp')\"\n",
              "            title=\"Generate code using this dataframe.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M7,19H8.4L18.45,9,17,7.55,7,17.6ZM5,21V16.75L18.45,3.32a2,2,0,0,1,2.83,0l1.4,1.43a1.91,1.91,0,0,1,.58,1.4,1.91,1.91,0,0,1-.58,1.4L9.25,21ZM18.45,9,17,7.55Zm-12,3A5.31,5.31,0,0,0,4.9,8.1,5.31,5.31,0,0,0,1,6.5,5.31,5.31,0,0,0,4.9,4.9,5.31,5.31,0,0,0,6.5,1,5.31,5.31,0,0,0,8.1,4.9,5.31,5.31,0,0,0,12,6.5,5.46,5.46,0,0,0,6.5,12Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "    <script>\n",
              "      (() => {\n",
              "      const buttonEl =\n",
              "        document.querySelector('#id_7b827bf2-a62f-4386-8bd8-427d7fa44525 button.colab-df-generate');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      buttonEl.onclick = () => {\n",
              "        google.colab.notebook.generateWithVariable('cumulative_wtp');\n",
              "      }\n",
              "      })();\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ]
          },
          "metadata": {},
          "execution_count": 32
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "plt.figure(figsize=(8, 6))\n",
        "sns.lineplot(x='price', y='per_customers_wtp', data=cumulative_wtp, marker='o')\n",
        "plt.xlabel('Price')\n",
        "plt.ylabel('Percent customers willing to pay')\n",
        "plt.title('Customers Willing to Pay Warrior Guild vs. Price')\n",
        "plt.show()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 564
        },
        "id": "K3za_ahkW1bA",
        "outputId": "94de0a77-376c-42d2-c26a-031878f4d144"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 800x600 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Plot revenue\n",
        "plt.figure(figsize=(8, 6))\n",
        "sns.lineplot(x='price', y='pred_revenue', data=cumulative_wtp, marker='o')\n",
        "plt.xlabel('Price')\n",
        "plt.ylabel('Predicted revenue')\n",
        "plt.title('Predicted Revenue Warrior Guild vs. Price')\n",
        "plt.show()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 564
        },
        "id": "3A-y21o3W6M_",
        "outputId": "d2a998ec-9b52-4df6-ae19-e85c5c1bcdf0"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 800x600 with 1 Axes>"
            ],
            "image/png": "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yMhIwdnZWbCzsxOCgoKE8ePHC/v3779tvDf7/PPPBQBCixYtKrUdPHhQACAAELKyssza9uzZI/Tq1UtQq9WCj4+PMGfOHGHz5s2VnqGIiAjhnnvuqXTtilJnN5epu7Xt5jJogiAIW7duFXr37i2o1WpBo9EIw4cPF06ePGnWp6IUWU5OTrXuv8KVK1eEl156SQgNDRXUarWgUqmEwMBAYdy4cWal6yr89ddfQvv27QWlUim0adNG+P7772tUBq3C0qVLhYCAAEGlUgndu3cXdu3aZfHZqEpVz+ovv/wiDB48WPD09DQ9V5MmTRKuXLli6lPxea/O99ztvq63qup7E7eUQRMEQbhw4YIwbtw4wcPDw/Q1iImJMSsRl5+fL8ybN08IDg4WlEql0KxZMyE8PFz4v//7P0Gn090xJqLqkghCHf63noiIiIiogeEcYCIiIiKyKUyAiYiIiMimMAEmIiIiIpvCBJiIiIiIbAoTYCIiIiKyKUyAiYiIiMimcCOMajAajcjIyICTk9Mdt1glIiIiovonCALy8/Ph4+MDqbTqMV4mwNWQkZEBX19fscMgIiIioju4ePEiWrZsWWUfJsDV4OTkBKD8E6rRaESOhoiIiIhupdVq4evra8rbqsIEuBoqpj1oNBomwEREREQNWHWmq3IRHBERERHZFCbARERERGRTmAATERERkU1hAkxERERENoUJMBERERHZFCbARERERGRTmAATERERkU1hAkxERERENoUJMBERERHZFCbARERERGRTmAATERERkU1hAkxERERENoUJMBERERHZFCbARERERGRTmACTTSvWGaAzGHGtoBQ6gxFFOoPYIREREVEdk4sdAJFYSvVliN2ZirjENGiLDdCo5YgOD8CUfkFQKWRih0dERER1hAkw2aRinQGxO1OxOD7FdExbbDB9PCkiEPZKfnsQERE1RZwCQTZJJpUiLjHNYltcYhrkUn5rEBERNVX8LU82KbdYB22x5fm+2mIDbhTpUKIvq+eoiIiIqD4wASabcjm3GHN/PQpHlRwateUpDhq1HE52cgz9ZDeW7jiL/BJ9PUdJREREdYkJMNmEEn0ZFm9NwcAPd+DnfRex5+xVjA/3t9h3fLg/9p2/jnM5hXh/UzJ6v7sNH/2VjBuFOgCsHEFERNTYcZUPNRnFOgNkUinyS/RwslPAYDRCrZBh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\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#Checking Question 4 pricing\n",
        "athena_Evercrest = Athena[Athena['gg.game.presented'] == 'Evercrest']\n",
        "\n",
        "cumulative_wtp = pd.DataFrame(columns=['price', 'per_customers_wtp', 'pred_revenue'])\n",
        "\n",
        "for price in np.arange(min(athena_Evercrest['gg.maxprice']), max(athena_Evercrest['gg.maxprice']) + 5, 2):\n",
        "    num_respondents_wtp = sum(athena_Evercrest['gg.maxprice'] >= price)\n",
        "    cumulative_wtp = pd.concat([cumulative_wtp, pd.DataFrame({\n",
        "        'price': [price],\n",
        "        'per_customers_wtp': [num_respondents_wtp / len(athena_Evercrest)],\n",
        "        'pred_revenue': [num_respondents_wtp * price]\n",
        "    })], ignore_index=True)\n",
        "cumulative_wtp"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 1000
        },
        "id": "e5U58PJwLdVY",
        "outputId": "ae045e4b-09e3-4bbb-ec7e-52a40194dc14"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "   price  per_customers_wtp pred_revenue\n",
              "0     12           1.000000         3312\n",
              "1     14           0.996377         3850\n",
              "2     16           0.992754         4384\n",
              "3     18           0.978261         4860\n",
              "4     20           0.971014         5360\n",
              "5     22           0.960145         5830\n",
              "6     24           0.942029         6240\n",
              "7     26           0.902174         6474\n",
              "8     28           0.876812         6776\n",
              "9     30           0.826087         6840\n",
              "10    32           0.778986         6880\n",
              "11    34           0.713768         6698\n",
              "12    36           0.681159         6768\n",
              "13    38           0.623188         6536\n",
              "14    40           0.557971         6160\n",
              "15    42           0.500000         5796\n",
              "16    44           0.449275         5456\n",
              "17    46           0.409420         5198\n",
              "18    48           0.358696         4752\n",
              "19    50           0.336957         4650\n",
              "20    52           0.315217         4524\n",
              "21    54           0.282609         4212\n",
              "22    56           0.253623         3920\n",
              "23    58           0.250000         4002\n",
              "24    60           0.235507         3900\n",
              "25    62           0.206522         3534\n",
              "26    64           0.173913         3072\n",
              "27    66           0.152174         2772\n",
              "28    68           0.144928         2720\n",
              "29    70           0.112319         2170\n",
              "30    72           0.097826         1944\n",
              "31    74           0.083333         1702\n",
              "32    76           0.076087         1596\n",
              "33    78           0.068841         1482\n",
              "34    80           0.057971         1280\n",
              "35    82           0.036232          820\n",
              "36    84           0.028986          672\n",
              "37    86           0.028986          688\n",
              "38    88           0.025362          616\n",
              "39    90           0.021739          540\n",
              "40    92           0.018116          460\n",
              "41    94           0.014493          376\n",
              "42    96           0.010870          288\n",
              "43    98           0.010870          294\n",
              "44   100           0.003623          100\n",
              "45   102           0.000000            0\n",
              "46   104           0.000000            0"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-fab66543-3765-4133-a4e0-763d8dbbc7ac\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>price</th>\n",
              "      <th>per_customers_wtp</th>\n",
              "      <th>pred_revenue</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>12</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>3312</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>14</td>\n",
              "      <td>0.996377</td>\n",
              "      <td>3850</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>16</td>\n",
              "      <td>0.992754</td>\n",
              "      <td>4384</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>18</td>\n",
              "      <td>0.978261</td>\n",
              "      <td>4860</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>20</td>\n",
              "      <td>0.971014</td>\n",
              "      <td>5360</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>5</th>\n",
              "      <td>22</td>\n",
              "      <td>0.960145</td>\n",
              "      <td>5830</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>6</th>\n",
              "      <td>24</td>\n",
              "      <td>0.942029</td>\n",
              "      <td>6240</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>7</th>\n",
              "      <td>26</td>\n",
              "      <td>0.902174</td>\n",
              "      <td>6474</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>8</th>\n",
              "      <td>28</td>\n",
              "      <td>0.876812</td>\n",
              "      <td>6776</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>9</th>\n",
              "      <td>30</td>\n",
              "      <td>0.826087</td>\n",
              "      <td>6840</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>10</th>\n",
              "      <td>32</td>\n",
              "      <td>0.778986</td>\n",
              "      <td>6880</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>11</th>\n",
              "      <td>34</td>\n",
              "      <td>0.713768</td>\n",
              "      <td>6698</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>12</th>\n",
              "      <td>36</td>\n",
              "      <td>0.681159</td>\n",
              "      <td>6768</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>13</th>\n",
              "      <td>38</td>\n",
              "      <td>0.623188</td>\n",
              "      <td>6536</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>14</th>\n",
              "      <td>40</td>\n",
              "      <td>0.557971</td>\n",
              "      <td>6160</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>15</th>\n",
              "      <td>42</td>\n",
              "      <td>0.500000</td>\n",
              "      <td>5796</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>16</th>\n",
              "      <td>44</td>\n",
              "      <td>0.449275</td>\n",
              "      <td>5456</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>17</th>\n",
              "      <td>46</td>\n",
              "      <td>0.409420</td>\n",
              "      <td>5198</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>18</th>\n",
              "      <td>48</td>\n",
              "      <td>0.358696</td>\n",
              "      <td>4752</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>19</th>\n",
              "      <td>50</td>\n",
              "      <td>0.336957</td>\n",
              "      <td>4650</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>20</th>\n",
              "      <td>52</td>\n",
              "      <td>0.315217</td>\n",
              "      <td>4524</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>21</th>\n",
              "      <td>54</td>\n",
              "      <td>0.282609</td>\n",
              "      <td>4212</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>22</th>\n",
              "      <td>56</td>\n",
              "      <td>0.253623</td>\n",
              "      <td>3920</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>23</th>\n",
              "      <td>58</td>\n",
              "      <td>0.250000</td>\n",
              "      <td>4002</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>24</th>\n",
              "      <td>60</td>\n",
              "      <td>0.235507</td>\n",
              "      <td>3900</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>25</th>\n",
              "      <td>62</td>\n",
              "      <td>0.206522</td>\n",
              "      <td>3534</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>26</th>\n",
              "      <td>64</td>\n",
              "      <td>0.173913</td>\n",
              "      <td>3072</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>27</th>\n",
              "      <td>66</td>\n",
              "      <td>0.152174</td>\n",
              "      <td>2772</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>28</th>\n",
              "      <td>68</td>\n",
              "      <td>0.144928</td>\n",
              "      <td>2720</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>29</th>\n",
              "      <td>70</td>\n",
              "      <td>0.112319</td>\n",
              "      <td>2170</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>30</th>\n",
              "      <td>72</td>\n",
              "      <td>0.097826</td>\n",
              "      <td>1944</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>31</th>\n",
              "      <td>74</td>\n",
              "      <td>0.083333</td>\n",
              "      <td>1702</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>32</th>\n",
              "      <td>76</td>\n",
              "      <td>0.076087</td>\n",
              "      <td>1596</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>33</th>\n",
              "      <td>78</td>\n",
              "      <td>0.068841</td>\n",
              "      <td>1482</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>34</th>\n",
              "      <td>80</td>\n",
              "      <td>0.057971</td>\n",
              "      <td>1280</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>35</th>\n",
              "      <td>82</td>\n",
              "      <td>0.036232</td>\n",
              "      <td>820</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>36</th>\n",
              "      <td>84</td>\n",
              "      <td>0.028986</td>\n",
              "      <td>672</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>37</th>\n",
              "      <td>86</td>\n",
              "      <td>0.028986</td>\n",
              "      <td>688</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>38</th>\n",
              "      <td>88</td>\n",
              "      <td>0.025362</td>\n",
              "      <td>616</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>39</th>\n",
              "      <td>90</td>\n",
              "      <td>0.021739</td>\n",
              "      <td>540</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>40</th>\n",
              "      <td>92</td>\n",
              "      <td>0.018116</td>\n",
              "      <td>460</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>41</th>\n",
              "      <td>94</td>\n",
              "      <td>0.014493</td>\n",
              "      <td>376</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>42</th>\n",
              "      <td>96</td>\n",
              "      <td>0.010870</td>\n",
              "      <td>288</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>43</th>\n",
              "      <td>98</td>\n",
              "      <td>0.010870</td>\n",
              "      <td>294</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>44</th>\n",
              "      <td>100</td>\n",
              "      <td>0.003623</td>\n",
              "      <td>100</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>45</th>\n",
              "      <td>102</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>46</th>\n",
              "      <td>104</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-fab66543-3765-4133-a4e0-763d8dbbc7ac')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-fab66543-3765-4133-a4e0-763d8dbbc7ac button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-fab66543-3765-4133-a4e0-763d8dbbc7ac');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-8f80ab97-3d44-4df8-ab7a-c79106bd4573\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-8f80ab97-3d44-4df8-ab7a-c79106bd4573')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-8f80ab97-3d44-4df8-ab7a-c79106bd4573 button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "  <div id=\"id_3cc65863-fdf2-4b5f-a3c1-6634bd595364\">\n",
              "    <style>\n",
              "      .colab-df-generate {\n",
              "        background-color: #E8F0FE;\n",
              "        border: none;\n",
              "        border-radius: 50%;\n",
              "        cursor: pointer;\n",
              "        display: none;\n",
              "        fill: #1967D2;\n",
              "        height: 32px;\n",
              "        padding: 0 0 0 0;\n",
              "        width: 32px;\n",
              "      }\n",
              "\n",
              "      .colab-df-generate:hover {\n",
              "        background-color: #E2EBFA;\n",
              "        box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "        fill: #174EA6;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate {\n",
              "        background-color: #3B4455;\n",
              "        fill: #D2E3FC;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate:hover {\n",
              "        background-color: #434B5C;\n",
              "        box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "        filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "        fill: #FFFFFF;\n",
              "      }\n",
              "    </style>\n",
              "    <button class=\"colab-df-generate\" onclick=\"generateWithVariable('cumulative_wtp')\"\n",
              "            title=\"Generate code using this dataframe.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M7,19H8.4L18.45,9,17,7.55,7,17.6ZM5,21V16.75L18.45,3.32a2,2,0,0,1,2.83,0l1.4,1.43a1.91,1.91,0,0,1,.58,1.4,1.91,1.91,0,0,1-.58,1.4L9.25,21ZM18.45,9,17,7.55Zm-12,3A5.31,5.31,0,0,0,4.9,8.1,5.31,5.31,0,0,0,1,6.5,5.31,5.31,0,0,0,4.9,4.9,5.31,5.31,0,0,0,6.5,1,5.31,5.31,0,0,0,8.1,4.9,5.31,5.31,0,0,0,12,6.5,5.46,5.46,0,0,0,6.5,12Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "    <script>\n",
              "      (() => {\n",
              "      const buttonEl =\n",
              "        document.querySelector('#id_3cc65863-fdf2-4b5f-a3c1-6634bd595364 button.colab-df-generate');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      buttonEl.onclick = () => {\n",
              "        google.colab.notebook.generateWithVariable('cumulative_wtp');\n",
              "      }\n",
              "      })();\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ]
          },
          "metadata": {},
          "execution_count": 35
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "plt.figure(figsize=(8, 6))\n",
        "sns.lineplot(x='price', y='per_customers_wtp', data=cumulative_wtp, marker='o')\n",
        "plt.xlabel('Price')\n",
        "plt.ylabel('Percent customers willing to pay')\n",
        "plt.title('Customers Willing to Pay Evercrest vs. Price')\n",
        "plt.show()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 564
        },
        "id": "YZY_hQSIWg5K",
        "outputId": "353ff568-d24f-4113-920a-4d7a3e7af370"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 800x600 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Plot revenue\n",
        "plt.figure(figsize=(8, 6))\n",
        "sns.lineplot(x='price', y='pred_revenue', data=cumulative_wtp, marker='o')\n",
        "plt.xlabel('Price')\n",
        "plt.ylabel('Predicted revenue')\n",
        "plt.title('Predicted Revenue Evercrest vs. Price')\n",
        "plt.show()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 564
        },
        "id": "c9oaCHGtWoNs",
        "outputId": "8d437a9e-425c-4c1d-c0ae-106ec98ffcf0"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 800x600 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "athena_Seraph_Guardians = Athena[Athena['gg.game.presented'] == 'Seraph Guardians']\n",
        "\n",
        "cumulative_wtp = pd.DataFrame(columns=['price', 'per_customers_wtp', 'pred_revenue'])\n",
        "\n",
        "for price in np.arange(min(athena_Seraph_Guardians['gg.maxprice']), max(athena_Seraph_Guardians['gg.maxprice']) + 5, 2):\n",
        "    num_respondents_wtp = sum(athena_Seraph_Guardians['gg.maxprice'] >= price)\n",
        "    cumulative_wtp = pd.concat([cumulative_wtp, pd.DataFrame({\n",
        "        'price': [price],\n",
        "        'per_customers_wtp': [num_respondents_wtp / len(athena_Seraph_Guardians)],\n",
        "        'pred_revenue': [num_respondents_wtp * price]\n",
        "    })], ignore_index=True)\n",
        "cumulative_wtp"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 1000
        },
        "id": "gMv6l5laXMhn",
        "outputId": "0b08cc6a-7eda-4aba-8683-7172f133c2f8"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "   price  per_customers_wtp pred_revenue\n",
              "0     15           1.000000         4155\n",
              "1     17           0.996390         4692\n",
              "2     19           0.992780         5225\n",
              "3     21           0.989170         5754\n",
              "4     23           0.981949         6256\n",
              "5     25           0.967509         6700\n",
              "6     27           0.949458         7101\n",
              "7     29           0.920578         7395\n",
              "8     31           0.884477         7595\n",
              "9     33           0.866426         7920\n",
              "10    35           0.823105         7980\n",
              "11    37           0.768953         7881\n",
              "12    39           0.732852         7917\n",
              "13    41           0.675090         7667\n",
              "14    43           0.638989         7611\n",
              "15    45           0.599278         7470\n",
              "16    47           0.548736         7144\n",
              "17    49           0.501805         6811\n",
              "18    51           0.440433         6222\n",
              "19    53           0.400722         5883\n",
              "20    55           0.371841         5665\n",
              "21    57           0.339350         5358\n",
              "22    59           0.310469         5074\n",
              "23    61           0.281588         4758\n",
              "24    63           0.252708         4410\n",
              "25    65           0.231047         4160\n",
              "26    67           0.202166         3752\n",
              "27    69           0.166065         3174\n",
              "28    71           0.155235         3053\n",
              "29    73           0.122744         2482\n",
              "30    75           0.104693         2175\n",
              "31    77           0.093863         2002\n",
              "32    79           0.072202         1580\n",
              "33    81           0.068592         1539\n",
              "34    83           0.061372         1411\n",
              "35    85           0.050542         1190\n",
              "36    87           0.039711          957\n",
              "37    89           0.028881          712\n",
              "38    91           0.028881          728\n",
              "39    93           0.025271          651\n",
              "40    95           0.021661          570\n",
              "41    97           0.018051          485\n",
              "42    99           0.003610           99\n",
              "43   101           0.000000            0\n",
              "44   103           0.000000            0"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-05eaa13e-1d88-409f-9a34-879d354977fc\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>price</th>\n",
              "      <th>per_customers_wtp</th>\n",
              "      <th>pred_revenue</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>15</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>4155</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>17</td>\n",
              "      <td>0.996390</td>\n",
              "      <td>4692</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>19</td>\n",
              "      <td>0.992780</td>\n",
              "      <td>5225</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>21</td>\n",
              "      <td>0.989170</td>\n",
              "      <td>5754</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>23</td>\n",
              "      <td>0.981949</td>\n",
              "      <td>6256</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>5</th>\n",
              "      <td>25</td>\n",
              "      <td>0.967509</td>\n",
              "      <td>6700</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>6</th>\n",
              "      <td>27</td>\n",
              "      <td>0.949458</td>\n",
              "      <td>7101</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>7</th>\n",
              "      <td>29</td>\n",
              "      <td>0.920578</td>\n",
              "      <td>7395</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>8</th>\n",
              "      <td>31</td>\n",
              "      <td>0.884477</td>\n",
              "      <td>7595</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>9</th>\n",
              "      <td>33</td>\n",
              "      <td>0.866426</td>\n",
              "      <td>7920</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>10</th>\n",
              "      <td>35</td>\n",
              "      <td>0.823105</td>\n",
              "      <td>7980</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>11</th>\n",
              "      <td>37</td>\n",
              "      <td>0.768953</td>\n",
              "      <td>7881</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>12</th>\n",
              "      <td>39</td>\n",
              "      <td>0.732852</td>\n",
              "      <td>7917</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>13</th>\n",
              "      <td>41</td>\n",
              "      <td>0.675090</td>\n",
              "      <td>7667</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>14</th>\n",
              "      <td>43</td>\n",
              "      <td>0.638989</td>\n",
              "      <td>7611</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>15</th>\n",
              "      <td>45</td>\n",
              "      <td>0.599278</td>\n",
              "      <td>7470</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>16</th>\n",
              "      <td>47</td>\n",
              "      <td>0.548736</td>\n",
              "      <td>7144</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>17</th>\n",
              "      <td>49</td>\n",
              "      <td>0.501805</td>\n",
              "      <td>6811</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>18</th>\n",
              "      <td>51</td>\n",
              "      <td>0.440433</td>\n",
              "      <td>6222</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>19</th>\n",
              "      <td>53</td>\n",
              "      <td>0.400722</td>\n",
              "      <td>5883</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>20</th>\n",
              "      <td>55</td>\n",
              "      <td>0.371841</td>\n",
              "      <td>5665</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>21</th>\n",
              "      <td>57</td>\n",
              "      <td>0.339350</td>\n",
              "      <td>5358</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>22</th>\n",
              "      <td>59</td>\n",
              "      <td>0.310469</td>\n",
              "      <td>5074</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>23</th>\n",
              "      <td>61</td>\n",
              "      <td>0.281588</td>\n",
              "      <td>4758</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>24</th>\n",
              "      <td>63</td>\n",
              "      <td>0.252708</td>\n",
              "      <td>4410</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>25</th>\n",
              "      <td>65</td>\n",
              "      <td>0.231047</td>\n",
              "      <td>4160</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>26</th>\n",
              "      <td>67</td>\n",
              "      <td>0.202166</td>\n",
              "      <td>3752</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>27</th>\n",
              "      <td>69</td>\n",
              "      <td>0.166065</td>\n",
              "      <td>3174</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>28</th>\n",
              "      <td>71</td>\n",
              "      <td>0.155235</td>\n",
              "      <td>3053</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>29</th>\n",
              "      <td>73</td>\n",
              "      <td>0.122744</td>\n",
              "      <td>2482</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>30</th>\n",
              "      <td>75</td>\n",
              "      <td>0.104693</td>\n",
              "      <td>2175</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>31</th>\n",
              "      <td>77</td>\n",
              "      <td>0.093863</td>\n",
              "      <td>2002</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>32</th>\n",
              "      <td>79</td>\n",
              "      <td>0.072202</td>\n",
              "      <td>1580</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>33</th>\n",
              "      <td>81</td>\n",
              "      <td>0.068592</td>\n",
              "      <td>1539</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>34</th>\n",
              "      <td>83</td>\n",
              "      <td>0.061372</td>\n",
              "      <td>1411</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>35</th>\n",
              "      <td>85</td>\n",
              "      <td>0.050542</td>\n",
              "      <td>1190</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>36</th>\n",
              "      <td>87</td>\n",
              "      <td>0.039711</td>\n",
              "      <td>957</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>37</th>\n",
              "      <td>89</td>\n",
              "      <td>0.028881</td>\n",
              "      <td>712</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>38</th>\n",
              "      <td>91</td>\n",
              "      <td>0.028881</td>\n",
              "      <td>728</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>39</th>\n",
              "      <td>93</td>\n",
              "      <td>0.025271</td>\n",
              "      <td>651</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>40</th>\n",
              "      <td>95</td>\n",
              "      <td>0.021661</td>\n",
              "      <td>570</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>41</th>\n",
              "      <td>97</td>\n",
              "      <td>0.018051</td>\n",
              "      <td>485</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>42</th>\n",
              "      <td>99</td>\n",
              "      <td>0.003610</td>\n",
              "      <td>99</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>43</th>\n",
              "      <td>101</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>44</th>\n",
              "      <td>103</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-05eaa13e-1d88-409f-9a34-879d354977fc')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-05eaa13e-1d88-409f-9a34-879d354977fc button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-05eaa13e-1d88-409f-9a34-879d354977fc');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-f0ed48df-9967-4852-aea8-aaff01ffc86f\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-f0ed48df-9967-4852-aea8-aaff01ffc86f')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-f0ed48df-9967-4852-aea8-aaff01ffc86f button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "  <div id=\"id_bd8cfaba-cd9c-4a81-867c-7feb37c2976a\">\n",
              "    <style>\n",
              "      .colab-df-generate {\n",
              "        background-color: #E8F0FE;\n",
              "        border: none;\n",
              "        border-radius: 50%;\n",
              "        cursor: pointer;\n",
              "        display: none;\n",
              "        fill: #1967D2;\n",
              "        height: 32px;\n",
              "        padding: 0 0 0 0;\n",
              "        width: 32px;\n",
              "      }\n",
              "\n",
              "      .colab-df-generate:hover {\n",
              "        background-color: #E2EBFA;\n",
              "        box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "        fill: #174EA6;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate {\n",
              "        background-color: #3B4455;\n",
              "        fill: #D2E3FC;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate:hover {\n",
              "        background-color: #434B5C;\n",
              "        box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "        filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "        fill: #FFFFFF;\n",
              "      }\n",
              "    </style>\n",
              "    <button class=\"colab-df-generate\" onclick=\"generateWithVariable('cumulative_wtp')\"\n",
              "            title=\"Generate code using this dataframe.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M7,19H8.4L18.45,9,17,7.55,7,17.6ZM5,21V16.75L18.45,3.32a2,2,0,0,1,2.83,0l1.4,1.43a1.91,1.91,0,0,1,.58,1.4,1.91,1.91,0,0,1-.58,1.4L9.25,21ZM18.45,9,17,7.55Zm-12,3A5.31,5.31,0,0,0,4.9,8.1,5.31,5.31,0,0,0,1,6.5,5.31,5.31,0,0,0,4.9,4.9,5.31,5.31,0,0,0,6.5,1,5.31,5.31,0,0,0,8.1,4.9,5.31,5.31,0,0,0,12,6.5,5.46,5.46,0,0,0,6.5,12Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "    <script>\n",
              "      (() => {\n",
              "      const buttonEl =\n",
              "        document.querySelector('#id_bd8cfaba-cd9c-4a81-867c-7feb37c2976a button.colab-df-generate');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      buttonEl.onclick = () => {\n",
              "        google.colab.notebook.generateWithVariable('cumulative_wtp');\n",
              "      }\n",
              "      })();\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ]
          },
          "metadata": {},
          "execution_count": 38
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "plt.figure(figsize=(8, 6))\n",
        "sns.lineplot(x='price', y='per_customers_wtp', data=cumulative_wtp, marker='o')\n",
        "plt.xlabel('Price')\n",
        "plt.ylabel('Percent customers willing to pay')\n",
        "plt.title('Customers Willing to Pay Seraph Guardians vs. Price')\n",
        "plt.show()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 564
        },
        "id": "MGaZ_if9XVfT",
        "outputId": "f07ed9ea-3cd5-453c-81c0-44717b4c433e"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 800x600 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Plot revenue\n",
        "plt.figure(figsize=(8, 6))\n",
        "sns.lineplot(x='price', y='pred_revenue', data=cumulative_wtp, marker='o')\n",
        "plt.xlabel('Price')\n",
        "plt.ylabel('Predicted revenue')\n",
        "plt.title('Predicted Revenue Seraph Guardians vs. Price')\n",
        "plt.show()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 564
        },
        "id": "dGX8gPu2XYJZ",
        "outputId": "62ada274-008f-4665-94f6-36cb4e88f443"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 800x600 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 524
        },
        "id": "jBzlxZlbuOQo",
        "outputId": "a98cf660-a198-4c63-e760-dc3aed65e43f"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "error",
          "ename": "KeyError",
          "evalue": "ignored",
          "traceback": [
            "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
            "\u001b[0;31mKeyError\u001b[0m                                  Traceback (most recent call last)",
            "\u001b[0;32m/usr/local/lib/python3.10/dist-packages/pandas/core/indexes/base.py\u001b[0m in \u001b[0;36mget_loc\u001b[0;34m(self, key, method, tolerance)\u001b[0m\n\u001b[1;32m   3801\u001b[0m             \u001b[0;32mtry\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 3802\u001b[0;31m                 \u001b[0;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_engine\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mget_loc\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mcasted_key\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   3803\u001b[0m             \u001b[0;32mexcept\u001b[0m \u001b[0mKeyError\u001b[0m \u001b[0;32mas\u001b[0m \u001b[0merr\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.10/dist-packages/pandas/_libs/index.pyx\u001b[0m in \u001b[0;36mpandas._libs.index.IndexEngine.get_loc\u001b[0;34m()\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.10/dist-packages/pandas/_libs/index.pyx\u001b[0m in \u001b[0;36mpandas._libs.index.IndexEngine.get_loc\u001b[0;34m()\u001b[0m\n",
            "\u001b[0;32mpandas/_libs/hashtable_class_helper.pxi\u001b[0m in \u001b[0;36mpandas._libs.hashtable.PyObjectHashTable.get_item\u001b[0;34m()\u001b[0m\n",
            "\u001b[0;32mpandas/_libs/hashtable_class_helper.pxi\u001b[0m in \u001b[0;36mpandas._libs.hashtable.PyObjectHashTable.get_item\u001b[0;34m()\u001b[0m\n",
            "\u001b[0;31mKeyError\u001b[0m: ('Segment_Label_Party Cows', 'Segment_Label_Solitary Navigators')",
            "\nThe above exception was the direct cause of the following exception:\n",
            "\u001b[0;31mKeyError\u001b[0m                                  Traceback (most recent call last)",
            "\u001b[0;32m<ipython-input-51-99e4481a2280>\u001b[0m in \u001b[0;36m<cell line: 7>\u001b[0;34m()\u001b[0m\n\u001b[1;32m      5\u001b[0m \u001b[0mX\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mpd\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mget_dummies\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mAthena\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m'income'\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mdrop_first\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;32mTrue\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mdtype\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mint\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      6\u001b[0m \u001b[0mX\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0msm\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0madd_constant\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mX\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 7\u001b[0;31m \u001b[0my\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mAthena\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m'Segment_Label_Party Cows'\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m'Segment_Label_Solitary Navigators'\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      8\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      9\u001b[0m \u001b[0;31m# Fit the OLS regression model\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.10/dist-packages/pandas/core/frame.py\u001b[0m in \u001b[0;36m__getitem__\u001b[0;34m(self, key)\u001b[0m\n\u001b[1;32m   3805\u001b[0m             \u001b[0;32mif\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mcolumns\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mnlevels\u001b[0m \u001b[0;34m>\u001b[0m \u001b[0;36m1\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   3806\u001b[0m                 \u001b[0;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_getitem_multilevel\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mkey\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 3807\u001b[0;31m             \u001b[0mindexer\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mcolumns\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mget_loc\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mkey\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   3808\u001b[0m             \u001b[0;32mif\u001b[0m \u001b[0mis_integer\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mindexer\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   3809\u001b[0m                 \u001b[0mindexer\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;34m[\u001b[0m\u001b[0mindexer\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.10/dist-packages/pandas/core/indexes/base.py\u001b[0m in \u001b[0;36mget_loc\u001b[0;34m(self, key, method, tolerance)\u001b[0m\n\u001b[1;32m   3802\u001b[0m                 \u001b[0;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_engine\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mget_loc\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mcasted_key\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   3803\u001b[0m             \u001b[0;32mexcept\u001b[0m \u001b[0mKeyError\u001b[0m \u001b[0;32mas\u001b[0m \u001b[0merr\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 3804\u001b[0;31m                 \u001b[0;32mraise\u001b[0m \u001b[0mKeyError\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mkey\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;32mfrom\u001b[0m \u001b[0merr\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   3805\u001b[0m             \u001b[0;32mexcept\u001b[0m \u001b[0mTypeError\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   3806\u001b[0m                 \u001b[0;31m# If we have a listlike key, _check_indexing_error will raise\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;31mKeyError\u001b[0m: ('Segment_Label_Party Cows', 'Segment_Label_Solitary Navigators')"
          ]
        }
      ]
    }
  ]
}